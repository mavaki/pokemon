{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n/**\n * <p>A Parse.Session object is a local representation of a revocable session.\n * This class is a subclass of a Parse.Object, and retains the same\n * functionality of a Parse.Object.</p>\n *\n * @alias Parse.Session\n * @augments Parse.Object\n */\nclass ParseSession extends _ParseObject.default {\n  /**\n   * @param {object} attributes The initial set of data to store in the user.\n   */\n  constructor(attributes) {\n    super('_Session');\n    if (attributes && typeof attributes === 'object') {\n      if (!this.set(attributes || {})) {\n        throw new Error(\"Can't create an invalid Session\");\n      }\n    }\n  }\n\n  /**\n   * Returns the session token string.\n   *\n   * @returns {string}\n   */\n  getSessionToken() {\n    const token = this.get('sessionToken');\n    if (typeof token === 'string') {\n      return token;\n    }\n    return '';\n  }\n  static readOnlyAttributes() {\n    return ['createdWith', 'expiresAt', 'installationId', 'restricted', 'sessionToken', 'user'];\n  }\n\n  /**\n   * Retrieves the Session object for the currently logged in session.\n   *\n   * @param {object} options useMasterKey\n   * @static\n   * @returns {Promise} A promise that is resolved with the Parse.Session\n   * object after it has been fetched. If there is no current user, the\n   * promise will be rejected.\n   */\n  static current(options) {\n    options = options || {};\n    const controller = _CoreManager.default.getSessionController();\n    const sessionOptions = {};\n    if (options.hasOwnProperty('useMasterKey')) {\n      sessionOptions.useMasterKey = options.useMasterKey;\n    }\n    return _ParseUser.default.currentAsync().then(user => {\n      if (!user) {\n        return _promise.default.reject('There is no current user.');\n      }\n      sessionOptions.sessionToken = user.getSessionToken();\n      return controller.getSession(sessionOptions);\n    });\n  }\n\n  /**\n   * Determines whether the current session token is revocable.\n   * This method is useful for migrating Express.js or Node.js web apps to\n   * use revocable sessions. If you are migrating an app that uses the Parse\n   * SDK in the browser only, please use Parse.User.enableRevocableSession()\n   * instead, so that sessions can be automatically upgraded.\n   *\n   * @static\n   * @returns {boolean}\n   */\n  static isCurrentSessionRevocable() {\n    const currentUser = _ParseUser.default.current();\n    if (currentUser) {\n      return (0, _isRevocableSession.default)(currentUser.getSessionToken() || '');\n    }\n    return false;\n  }\n}\n_ParseObject.default.registerSubclass('_Session', ParseSession);\nconst DefaultController = {\n  getSession(options) {\n    const RESTController = _CoreManager.default.getRESTController();\n    const session = new ParseSession();\n    return RESTController.request('GET', 'sessions/me', {}, options).then(sessionData => {\n      session._finishFetch(sessionData);\n      session._setExisted(true);\n      return session;\n    });\n  }\n};\n_CoreManager.default.setSessionController(DefaultController);\nvar _default = exports.default = ParseSession;","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_promise","_CoreManager","_isRevocableSession","_ParseObject","_ParseUser","ParseSession","constructor","attributes","set","Error","getSessionToken","token","get","readOnlyAttributes","current","options","controller","getSessionController","sessionOptions","hasOwnProperty","useMasterKey","currentAsync","then","user","reject","sessionToken","getSession","isCurrentSessionRevocable","currentUser","registerSubclass","DefaultController","RESTController","getRESTController","session","request","sessionData","_finishFetch","_setExisted","setSessionController","_default"],"sources":["/Users/jonathandemarco/react/my-app/node_modules/parse/lib/browser/ParseSession.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n/**\n * <p>A Parse.Session object is a local representation of a revocable session.\n * This class is a subclass of a Parse.Object, and retains the same\n * functionality of a Parse.Object.</p>\n *\n * @alias Parse.Session\n * @augments Parse.Object\n */\nclass ParseSession extends _ParseObject.default {\n  /**\n   * @param {object} attributes The initial set of data to store in the user.\n   */\n  constructor(attributes) {\n    super('_Session');\n    if (attributes && typeof attributes === 'object') {\n      if (!this.set(attributes || {})) {\n        throw new Error(\"Can't create an invalid Session\");\n      }\n    }\n  }\n\n  /**\n   * Returns the session token string.\n   *\n   * @returns {string}\n   */\n  getSessionToken() {\n    const token = this.get('sessionToken');\n    if (typeof token === 'string') {\n      return token;\n    }\n    return '';\n  }\n  static readOnlyAttributes() {\n    return ['createdWith', 'expiresAt', 'installationId', 'restricted', 'sessionToken', 'user'];\n  }\n\n  /**\n   * Retrieves the Session object for the currently logged in session.\n   *\n   * @param {object} options useMasterKey\n   * @static\n   * @returns {Promise} A promise that is resolved with the Parse.Session\n   * object after it has been fetched. If there is no current user, the\n   * promise will be rejected.\n   */\n  static current(options) {\n    options = options || {};\n    const controller = _CoreManager.default.getSessionController();\n    const sessionOptions = {};\n    if (options.hasOwnProperty('useMasterKey')) {\n      sessionOptions.useMasterKey = options.useMasterKey;\n    }\n    return _ParseUser.default.currentAsync().then(user => {\n      if (!user) {\n        return _promise.default.reject('There is no current user.');\n      }\n      sessionOptions.sessionToken = user.getSessionToken();\n      return controller.getSession(sessionOptions);\n    });\n  }\n\n  /**\n   * Determines whether the current session token is revocable.\n   * This method is useful for migrating Express.js or Node.js web apps to\n   * use revocable sessions. If you are migrating an app that uses the Parse\n   * SDK in the browser only, please use Parse.User.enableRevocableSession()\n   * instead, so that sessions can be automatically upgraded.\n   *\n   * @static\n   * @returns {boolean}\n   */\n  static isCurrentSessionRevocable() {\n    const currentUser = _ParseUser.default.current();\n    if (currentUser) {\n      return (0, _isRevocableSession.default)(currentUser.getSessionToken() || '');\n    }\n    return false;\n  }\n}\n_ParseObject.default.registerSubclass('_Session', ParseSession);\nconst DefaultController = {\n  getSession(options) {\n    const RESTController = _CoreManager.default.getRESTController();\n    const session = new ParseSession();\n    return RESTController.request('GET', 'sessions/me', {}, options).then(sessionData => {\n      session._finishFetch(sessionData);\n      session._setExisted(true);\n      return session;\n    });\n  }\n};\n_CoreManager.default.setSessionController(DefaultController);\nvar _default = exports.default = ParseSession;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}