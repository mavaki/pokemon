{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _promiseUtils = require(\"./promiseUtils\");\n/**\n * Creates a new LiveQuery Subscription.\n * <a href=\"https://nodejs.org/api/events.html#events_class_eventemitter\">cloud functions</a>.\n *\n * <p>Response Object - Contains data from the client that made the request\n * <ul>\n * <li>clientId</li>\n * <li>installationId - requires Parse Server 4.0.0+</li>\n * </ul>\n * </p>\n *\n * <p>Open Event - When you call query.subscribe(), we send a subscribe request to\n * the LiveQuery server, when we get the confirmation from the LiveQuery server,\n * this event will be emitted. When the client loses WebSocket connection to the\n * LiveQuery server, we will try to auto reconnect the LiveQuery server. If we\n * reconnect the LiveQuery server and successfully resubscribe the ParseQuery,\n * you'll also get this event.\n *\n * <pre>\n * subscription.on('open', (response) => {\n *\n * });</pre></p>\n *\n * <p>Create Event - When a new ParseObject is created and it fulfills the ParseQuery you subscribe,\n * you'll get this event. The object is the ParseObject which is created.\n *\n * <pre>\n * subscription.on('create', (object, response) => {\n *\n * });</pre></p>\n *\n * <p>Update Event - When an existing ParseObject (original) which fulfills the ParseQuery you subscribe\n * is updated (The ParseObject fulfills the ParseQuery before and after changes),\n * you'll get this event. The object is the ParseObject which is updated.\n * Its content is the latest value of the ParseObject.\n *\n * Parse-Server 3.1.3+ Required for original object parameter\n *\n * <pre>\n * subscription.on('update', (object, original, response) => {\n *\n * });</pre></p>\n *\n * <p>Enter Event - When an existing ParseObject's (original) old value doesn't fulfill the ParseQuery\n * but its new value fulfills the ParseQuery, you'll get this event. The object is the\n * ParseObject which enters the ParseQuery. Its content is the latest value of the ParseObject.\n *\n * Parse-Server 3.1.3+ Required for original object parameter\n *\n * <pre>\n * subscription.on('enter', (object, original, response) => {\n *\n * });</pre></p>\n *\n *\n * <p>Update Event - When an existing ParseObject's old value fulfills the ParseQuery but its new value\n * doesn't fulfill the ParseQuery, you'll get this event. The object is the ParseObject\n * which leaves the ParseQuery. Its content is the latest value of the ParseObject.\n *\n * <pre>\n * subscription.on('leave', (object, response) => {\n *\n * });</pre></p>\n *\n *\n * <p>Delete Event - When an existing ParseObject which fulfills the ParseQuery is deleted, you'll\n * get this event. The object is the ParseObject which is deleted.\n *\n * <pre>\n * subscription.on('delete', (object, response) => {\n *\n * });</pre></p>\n *\n *\n * <p>Close Event - When the client loses the WebSocket connection to the LiveQuery\n * server and we stop receiving events, you'll get this event.\n *\n * <pre>\n * subscription.on('close', () => {\n *\n * });</pre></p>\n */\nclass Subscription {\n  /*\n   * @param {string | number} id - subscription id\n   * @param {string} query - query to subscribe to\n   * @param {string} sessionToken - optional session token\n   */\n  constructor(id, query, sessionToken) {\n    var _this = this;\n    (0, _defineProperty2.default)(this, \"id\", void 0);\n    (0, _defineProperty2.default)(this, \"query\", void 0);\n    (0, _defineProperty2.default)(this, \"sessionToken\", void 0);\n    (0, _defineProperty2.default)(this, \"subscribePromise\", void 0);\n    (0, _defineProperty2.default)(this, \"unsubscribePromise\", void 0);\n    (0, _defineProperty2.default)(this, \"subscribed\", void 0);\n    (0, _defineProperty2.default)(this, \"emitter\", void 0);\n    (0, _defineProperty2.default)(this, \"on\", void 0);\n    (0, _defineProperty2.default)(this, \"emit\", void 0);\n    this.id = id;\n    this.query = query;\n    this.sessionToken = sessionToken;\n    this.subscribePromise = (0, _promiseUtils.resolvingPromise)();\n    this.unsubscribePromise = (0, _promiseUtils.resolvingPromise)();\n    this.subscribed = false;\n    const EventEmitter = _CoreManager.default.getEventEmitter();\n    this.emitter = new EventEmitter();\n    this.on = (eventName, listener) => this.emitter.on(eventName, listener);\n    this.emit = function (eventName) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      return _this.emitter.emit(eventName, ...args);\n    };\n    // adding listener so process does not crash\n    // best practice is for developer to register their own listener\n    this.on('error', () => {});\n  }\n\n  /**\n   * Close the subscription\n   *\n   * @returns {Promise}\n   */\n  unsubscribe() {\n    return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient().then(liveQueryClient => {\n      this.emit('close');\n      return liveQueryClient.unsubscribe(this);\n    });\n  }\n}\nvar _default = exports.default = Subscription;","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_defineProperty2","_CoreManager","_promiseUtils","Subscription","constructor","id","query","sessionToken","_this","subscribePromise","resolvingPromise","unsubscribePromise","subscribed","EventEmitter","getEventEmitter","emitter","on","eventName","listener","emit","_len","arguments","length","args","Array","_key","unsubscribe","getLiveQueryController","getDefaultLiveQueryClient","then","liveQueryClient","_default"],"sources":["/home/mavrik/Documents/classes/web-dev/pokemon/node_modules/parse/lib/browser/LiveQuerySubscription.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _promiseUtils = require(\"./promiseUtils\");\n/**\n * Creates a new LiveQuery Subscription.\n * <a href=\"https://nodejs.org/api/events.html#events_class_eventemitter\">cloud functions</a>.\n *\n * <p>Response Object - Contains data from the client that made the request\n * <ul>\n * <li>clientId</li>\n * <li>installationId - requires Parse Server 4.0.0+</li>\n * </ul>\n * </p>\n *\n * <p>Open Event - When you call query.subscribe(), we send a subscribe request to\n * the LiveQuery server, when we get the confirmation from the LiveQuery server,\n * this event will be emitted. When the client loses WebSocket connection to the\n * LiveQuery server, we will try to auto reconnect the LiveQuery server. If we\n * reconnect the LiveQuery server and successfully resubscribe the ParseQuery,\n * you'll also get this event.\n *\n * <pre>\n * subscription.on('open', (response) => {\n *\n * });</pre></p>\n *\n * <p>Create Event - When a new ParseObject is created and it fulfills the ParseQuery you subscribe,\n * you'll get this event. The object is the ParseObject which is created.\n *\n * <pre>\n * subscription.on('create', (object, response) => {\n *\n * });</pre></p>\n *\n * <p>Update Event - When an existing ParseObject (original) which fulfills the ParseQuery you subscribe\n * is updated (The ParseObject fulfills the ParseQuery before and after changes),\n * you'll get this event. The object is the ParseObject which is updated.\n * Its content is the latest value of the ParseObject.\n *\n * Parse-Server 3.1.3+ Required for original object parameter\n *\n * <pre>\n * subscription.on('update', (object, original, response) => {\n *\n * });</pre></p>\n *\n * <p>Enter Event - When an existing ParseObject's (original) old value doesn't fulfill the ParseQuery\n * but its new value fulfills the ParseQuery, you'll get this event. The object is the\n * ParseObject which enters the ParseQuery. Its content is the latest value of the ParseObject.\n *\n * Parse-Server 3.1.3+ Required for original object parameter\n *\n * <pre>\n * subscription.on('enter', (object, original, response) => {\n *\n * });</pre></p>\n *\n *\n * <p>Update Event - When an existing ParseObject's old value fulfills the ParseQuery but its new value\n * doesn't fulfill the ParseQuery, you'll get this event. The object is the ParseObject\n * which leaves the ParseQuery. Its content is the latest value of the ParseObject.\n *\n * <pre>\n * subscription.on('leave', (object, response) => {\n *\n * });</pre></p>\n *\n *\n * <p>Delete Event - When an existing ParseObject which fulfills the ParseQuery is deleted, you'll\n * get this event. The object is the ParseObject which is deleted.\n *\n * <pre>\n * subscription.on('delete', (object, response) => {\n *\n * });</pre></p>\n *\n *\n * <p>Close Event - When the client loses the WebSocket connection to the LiveQuery\n * server and we stop receiving events, you'll get this event.\n *\n * <pre>\n * subscription.on('close', () => {\n *\n * });</pre></p>\n */\nclass Subscription {\n  /*\n   * @param {string | number} id - subscription id\n   * @param {string} query - query to subscribe to\n   * @param {string} sessionToken - optional session token\n   */\n  constructor(id, query, sessionToken) {\n    var _this = this;\n    (0, _defineProperty2.default)(this, \"id\", void 0);\n    (0, _defineProperty2.default)(this, \"query\", void 0);\n    (0, _defineProperty2.default)(this, \"sessionToken\", void 0);\n    (0, _defineProperty2.default)(this, \"subscribePromise\", void 0);\n    (0, _defineProperty2.default)(this, \"unsubscribePromise\", void 0);\n    (0, _defineProperty2.default)(this, \"subscribed\", void 0);\n    (0, _defineProperty2.default)(this, \"emitter\", void 0);\n    (0, _defineProperty2.default)(this, \"on\", void 0);\n    (0, _defineProperty2.default)(this, \"emit\", void 0);\n    this.id = id;\n    this.query = query;\n    this.sessionToken = sessionToken;\n    this.subscribePromise = (0, _promiseUtils.resolvingPromise)();\n    this.unsubscribePromise = (0, _promiseUtils.resolvingPromise)();\n    this.subscribed = false;\n    const EventEmitter = _CoreManager.default.getEventEmitter();\n    this.emitter = new EventEmitter();\n    this.on = (eventName, listener) => this.emitter.on(eventName, listener);\n    this.emit = function (eventName) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      return _this.emitter.emit(eventName, ...args);\n    };\n    // adding listener so process does not crash\n    // best practice is for developer to register their own listener\n    this.on('error', () => {});\n  }\n\n  /**\n   * Close the subscription\n   *\n   * @returns {Promise}\n   */\n  unsubscribe() {\n    return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient().then(liveQueryClient => {\n      this.emit('close');\n      return liveQueryClient.unsubscribe(this);\n    });\n  }\n}\nvar _default = exports.default = Subscription;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8DAA8D,CAAC;AACpG,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,sDAAsD,CAAC;AAC5FD,sBAAsB,CAACG,OAAO,EAAE,YAAY,EAAE;EAC5CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxB,IAAIC,gBAAgB,GAAGJ,sBAAsB,CAACD,OAAO,CAAC,+CAA+C,CAAC,CAAC;AACvG,IAAIM,YAAY,GAAGL,sBAAsB,CAACD,OAAO,CAAC,eAAe,CAAC,CAAC;AACnE,IAAIO,aAAa,GAAGP,OAAO,CAAC,gBAAgB,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMQ,YAAY,CAAC;EACjB;AACF;AACA;AACA;AACA;EACEC,WAAWA,CAACC,EAAE,EAAEC,KAAK,EAAEC,YAAY,EAAE;IACnC,IAAIC,KAAK,GAAG,IAAI;IAChB,CAAC,CAAC,EAAER,gBAAgB,CAACD,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IACjD,CAAC,CAAC,EAAEC,gBAAgB,CAACD,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC,CAAC,EAAEC,gBAAgB,CAACD,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;IAC3D,CAAC,CAAC,EAAEC,gBAAgB,CAACD,OAAO,EAAE,IAAI,EAAE,kBAAkB,EAAE,KAAK,CAAC,CAAC;IAC/D,CAAC,CAAC,EAAEC,gBAAgB,CAACD,OAAO,EAAE,IAAI,EAAE,oBAAoB,EAAE,KAAK,CAAC,CAAC;IACjE,CAAC,CAAC,EAAEC,gBAAgB,CAACD,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;IACzD,CAAC,CAAC,EAAEC,gBAAgB,CAACD,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACtD,CAAC,CAAC,EAAEC,gBAAgB,CAACD,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IACjD,CAAC,CAAC,EAAEC,gBAAgB,CAACD,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IACnD,IAAI,CAACM,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACE,gBAAgB,GAAG,CAAC,CAAC,EAAEP,aAAa,CAACQ,gBAAgB,EAAE,CAAC;IAC7D,IAAI,CAACC,kBAAkB,GAAG,CAAC,CAAC,EAAET,aAAa,CAACQ,gBAAgB,EAAE,CAAC;IAC/D,IAAI,CAACE,UAAU,GAAG,KAAK;IACvB,MAAMC,YAAY,GAAGZ,YAAY,CAACF,OAAO,CAACe,eAAe,CAAC,CAAC;IAC3D,IAAI,CAACC,OAAO,GAAG,IAAIF,YAAY,CAAC,CAAC;IACjC,IAAI,CAACG,EAAE,GAAG,CAACC,SAAS,EAAEC,QAAQ,KAAK,IAAI,CAACH,OAAO,CAACC,EAAE,CAACC,SAAS,EAAEC,QAAQ,CAAC;IACvE,IAAI,CAACC,IAAI,GAAG,UAAUF,SAAS,EAAE;MAC/B,KAAK,IAAIG,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACJ,IAAI,GAAG,CAAC,GAAGA,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;QAC1GF,IAAI,CAACE,IAAI,GAAG,CAAC,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;MAClC;MACA,OAAOjB,KAAK,CAACO,OAAO,CAACI,IAAI,CAACF,SAAS,EAAE,GAAGM,IAAI,CAAC;IAC/C,CAAC;IACD;IACA;IACA,IAAI,CAACP,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;EAC5B;;EAEA;AACF;AACA;AACA;AACA;EACEU,WAAWA,CAAA,EAAG;IACZ,OAAOzB,YAAY,CAACF,OAAO,CAAC4B,sBAAsB,CAAC,CAAC,CAACC,yBAAyB,CAAC,CAAC,CAACC,IAAI,CAACC,eAAe,IAAI;MACvG,IAAI,CAACX,IAAI,CAAC,OAAO,CAAC;MAClB,OAAOW,eAAe,CAACJ,WAAW,CAAC,IAAI,CAAC;IAC1C,CAAC,CAAC;EACJ;AACF;AACA,IAAIK,QAAQ,GAAGlC,OAAO,CAACE,OAAO,GAAGI,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}