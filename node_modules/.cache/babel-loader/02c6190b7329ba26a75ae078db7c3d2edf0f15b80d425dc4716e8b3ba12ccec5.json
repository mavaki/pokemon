{"ast":null,"code":"var _jsxFileName = \"/Users/jonathandemarco/react/my-app/src/Components/Main.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getPeople, createPerson } from \"./LearnService\";\nimport MainList from \"./MainList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [names, setNames] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newTitle, setNewTitle] = useState(\"\");\n  const [newNotes, setNewNotes] = useState(\"\");\n\n  // UseEffect to fetch data when the component loads\n  useEffect(() => {\n    getPeople().then(fetchedNames => {\n      setNames(fetchedNames);\n    });\n  }, []);\n  const handleSubmit = e => {\n    e.preventDefault(); // Prevent default form submission\n    if (newName.trim() && newTitle.trim() && newNotes.trim()) {\n      createPerson(newName, newTitle, newNotes).then(result => {\n        // After successfully adding a person, refresh the list\n        getPeople().then(updatedNames => {\n          setNames(updatedNames); // Update state with refreshed list\n        });\n        setNewName(\"\"); // Clear input fields\n        setNewTitle(\"\");\n        setNewNotes(\"\");\n      });\n    } else {\n      alert(\"Please fill out all fields.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newName,\n        onChange: e => setNewName(e.target.value),\n        placeholder: \"Enter Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newTitle,\n        onChange: e => setNewTitle(e.target.value),\n        placeholder: \"Enter Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newNotes,\n        onChange: e => setNewNotes(e.target.value),\n        placeholder: \"Enter Notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainList, {\n      names: names\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(Main, \"4u1pBLb45dgTqWwbmB7DbVJhqLc=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","getPeople","createPerson","MainList","jsxDEV","_jsxDEV","Main","_s","names","setNames","newName","setNewName","newTitle","setNewTitle","newNotes","setNewNotes","then","fetchedNames","handleSubmit","e","preventDefault","trim","result","updatedNames","alert","children","onSubmit","type","value","onChange","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jonathandemarco/react/my-app/src/Components/Main.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getPeople, createPerson } from \"./LearnService\";\nimport MainList from \"./MainList\";\n\nconst Main = () => {\n  const [names, setNames] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newTitle, setNewTitle] = useState(\"\");\n  const [newNotes, setNewNotes] = useState(\"\");\n\n  // UseEffect to fetch data when the component loads\n  useEffect(() => {\n    getPeople().then((fetchedNames) => {\n      setNames(fetchedNames);\n    });\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault(); // Prevent default form submission\n    if (newName.trim() && newTitle.trim() && newNotes.trim()) {\n      createPerson(newName, newTitle, newNotes).then((result) => {\n        // After successfully adding a person, refresh the list\n        getPeople().then((updatedNames) => {\n          setNames(updatedNames); // Update state with refreshed list\n        });\n        setNewName(\"\"); // Clear input fields\n        setNewTitle(\"\");\n        setNewNotes(\"\");\n      });\n    } else {\n      alert(\"Please fill out all fields.\");\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={newName}\n          onChange={(e) => setNewName(e.target.value)}\n          placeholder=\"Enter Name\"\n        />\n        <input\n          type=\"text\"\n          value={newTitle}\n          onChange={(e) => setNewTitle(e.target.value)}\n          placeholder=\"Enter Title\"\n        />\n        <input\n          type=\"text\"\n          value={newNotes}\n          onChange={(e) => setNewNotes(e.target.value)}\n          placeholder=\"Enter Notes\"\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n      <MainList names={names} />\n    </div>\n  );\n};\n\nexport default Main;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,YAAY,QAAQ,gBAAgB;AACxD,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACdC,SAAS,CAAC,CAAC,CAACe,IAAI,CAAEC,YAAY,IAAK;MACjCR,QAAQ,CAACQ,YAAY,CAAC;IACxB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;IACpB,IAAIV,OAAO,CAACW,IAAI,CAAC,CAAC,IAAIT,QAAQ,CAACS,IAAI,CAAC,CAAC,IAAIP,QAAQ,CAACO,IAAI,CAAC,CAAC,EAAE;MACxDnB,YAAY,CAACQ,OAAO,EAAEE,QAAQ,EAAEE,QAAQ,CAAC,CAACE,IAAI,CAAEM,MAAM,IAAK;QACzD;QACArB,SAAS,CAAC,CAAC,CAACe,IAAI,CAAEO,YAAY,IAAK;UACjCd,QAAQ,CAACc,YAAY,CAAC,CAAC,CAAC;QAC1B,CAAC,CAAC;QACFZ,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;QAChBE,WAAW,CAAC,EAAE,CAAC;QACfE,WAAW,CAAC,EAAE,CAAC;MACjB,CAAC,CAAC;IACJ,CAAC,MAAM;MACLS,KAAK,CAAC,6BAA6B,CAAC;IACtC;EACF,CAAC;EAED,oBACEnB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAMqB,QAAQ,EAAER,YAAa;MAAAO,QAAA,gBAC3BpB,OAAA;QACEsB,IAAI,EAAC,MAAM;QACXC,KAAK,EAAElB,OAAQ;QACfmB,QAAQ,EAAGV,CAAC,IAAKR,UAAU,CAACQ,CAAC,CAACW,MAAM,CAACF,KAAK,CAAE;QAC5CG,WAAW,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC,eACF9B,OAAA;QACEsB,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEhB,QAAS;QAChBiB,QAAQ,EAAGV,CAAC,IAAKN,WAAW,CAACM,CAAC,CAACW,MAAM,CAACF,KAAK,CAAE;QAC7CG,WAAW,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC,eACF9B,OAAA;QACEsB,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEd,QAAS;QAChBe,QAAQ,EAAGV,CAAC,IAAKJ,WAAW,CAACI,CAAC,CAACW,MAAM,CAACF,KAAK,CAAE;QAC7CG,WAAW,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC,eACF9B,OAAA;QAAQsB,IAAI,EAAC,QAAQ;QAAAF,QAAA,EAAC;MAAM;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,eACP9B,OAAA,CAACF,QAAQ;MAACK,KAAK,EAAEA;IAAM;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvB,CAAC;AAEV,CAAC;AAAC5B,EAAA,CAxDID,IAAI;AAAA8B,EAAA,GAAJ9B,IAAI;AA0DV,eAAeA,IAAI;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}