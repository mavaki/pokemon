{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getJobStatus = getJobStatus;\nexports.getJobsData = getJobsData;\nexports.run = run;\nexports.startJob = startJob;\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _decode = _interopRequireDefault(require(\"./decode\"));\nvar _encode = _interopRequireDefault(require(\"./encode\"));\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n/**\n * Contains functions for calling and declaring\n * <a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n * <p><strong><em>\n *   Some functions are only available from Cloud Code.\n * </em></strong></p>\n *\n * @class Parse.Cloud\n * @static\n * @hideconstructor\n */\n\n/**\n * Makes a call to a cloud function.\n *\n * @function run\n * @name Parse.Cloud.run\n * @param {string} name The function name.\n * @param {object} data The parameters to send to the cloud function.\n * @param {object} options\n * @returns {Promise} A promise that will be resolved with the result\n * of the function.\n */\nfunction run(name, data, options) {\n  options = options || {};\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud function name must be a string.');\n  }\n  const requestOptions = {};\n  if (options.useMasterKey) {\n    requestOptions.useMasterKey = options.useMasterKey;\n  }\n  if (options.sessionToken) {\n    requestOptions.sessionToken = options.sessionToken;\n  }\n  if (options.installationId) {\n    requestOptions.installationId = options.installationId;\n  }\n  if (options.context && typeof options.context === 'object') {\n    requestOptions.context = options.context;\n  }\n  return _CoreManager.default.getCloudController().run(name, data, requestOptions);\n}\n\n/**\n * Gets data for the current set of cloud jobs.\n *\n * @function getJobsData\n * @name Parse.Cloud.getJobsData\n * @returns {Promise} A promise that will be resolved with the result\n * of the function.\n */\nfunction getJobsData() {\n  return _CoreManager.default.getCloudController().getJobsData({\n    useMasterKey: true\n  });\n}\n\n/**\n * Starts a given cloud job, which will process asynchronously.\n *\n * @function startJob\n * @name Parse.Cloud.startJob\n * @param {string} name The function name.\n * @param {object} data The parameters to send to the cloud function.\n * @returns {Promise} A promise that will be resolved with the jobStatusId\n * of the job.\n */\nfunction startJob(name, data) {\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud job name must be a string.');\n  }\n  return _CoreManager.default.getCloudController().startJob(name, data, {\n    useMasterKey: true\n  });\n}\n\n/**\n * Gets job status by Id\n *\n * @function getJobStatus\n * @name Parse.Cloud.getJobStatus\n * @param {string} jobStatusId The Id of Job Status.\n * @returns {Parse.Object} Status of Job.\n */\nfunction getJobStatus(jobStatusId) {\n  const query = new _ParseQuery.default('_JobStatus');\n  return query.get(jobStatusId, {\n    useMasterKey: true\n  });\n}\nconst DefaultController = {\n  run(name, data, options) {\n    const RESTController = _CoreManager.default.getRESTController();\n    const payload = (0, _encode.default)(data, true);\n    const request = RESTController.request('POST', 'functions/' + name, payload, options);\n    return request.then(res => {\n      if (typeof res === 'object' && (0, _keys.default)(res).length > 0 && !res.hasOwnProperty('result')) {\n        throw new _ParseError.default(_ParseError.default.INVALID_JSON, 'The server returned an invalid response.');\n      }\n      const decoded = (0, _decode.default)(res);\n      if (decoded && decoded.hasOwnProperty('result')) {\n        return _promise.default.resolve(decoded.result);\n      }\n      return _promise.default.resolve(undefined);\n    });\n  },\n  getJobsData(options) {\n    const RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'cloud_code/jobs/data', null, options);\n  },\n  async startJob(name, data, options) {\n    const RESTController = _CoreManager.default.getRESTController();\n    const payload = (0, _encode.default)(data, true);\n    options.returnStatus = true;\n    const response = await RESTController.request('POST', 'jobs/' + name, payload, options);\n    return response._headers?.['X-Parse-Job-Status-Id'];\n  }\n};\n_CoreManager.default.setCloudController(DefaultController);","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","getJobStatus","getJobsData","run","startJob","_keys","_promise","_CoreManager","_decode","_encode","_ParseError","_ParseQuery","name","data","options","length","TypeError","requestOptions","useMasterKey","sessionToken","installationId","context","default","getCloudController","jobStatusId","query","get","DefaultController","RESTController","getRESTController","payload","request","then","res","hasOwnProperty","INVALID_JSON","decoded","resolve","result","undefined","returnStatus","response","_headers","setCloudController"],"sources":["/home/mavrik/Documents/github/pokemon/node_modules/parse/lib/browser/Cloud.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getJobStatus = getJobStatus;\nexports.getJobsData = getJobsData;\nexports.run = run;\nexports.startJob = startJob;\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _decode = _interopRequireDefault(require(\"./decode\"));\nvar _encode = _interopRequireDefault(require(\"./encode\"));\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n/**\n * Contains functions for calling and declaring\n * <a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n * <p><strong><em>\n *   Some functions are only available from Cloud Code.\n * </em></strong></p>\n *\n * @class Parse.Cloud\n * @static\n * @hideconstructor\n */\n\n/**\n * Makes a call to a cloud function.\n *\n * @function run\n * @name Parse.Cloud.run\n * @param {string} name The function name.\n * @param {object} data The parameters to send to the cloud function.\n * @param {object} options\n * @returns {Promise} A promise that will be resolved with the result\n * of the function.\n */\nfunction run(name, data, options) {\n  options = options || {};\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud function name must be a string.');\n  }\n  const requestOptions = {};\n  if (options.useMasterKey) {\n    requestOptions.useMasterKey = options.useMasterKey;\n  }\n  if (options.sessionToken) {\n    requestOptions.sessionToken = options.sessionToken;\n  }\n  if (options.installationId) {\n    requestOptions.installationId = options.installationId;\n  }\n  if (options.context && typeof options.context === 'object') {\n    requestOptions.context = options.context;\n  }\n  return _CoreManager.default.getCloudController().run(name, data, requestOptions);\n}\n\n/**\n * Gets data for the current set of cloud jobs.\n *\n * @function getJobsData\n * @name Parse.Cloud.getJobsData\n * @returns {Promise} A promise that will be resolved with the result\n * of the function.\n */\nfunction getJobsData() {\n  return _CoreManager.default.getCloudController().getJobsData({\n    useMasterKey: true\n  });\n}\n\n/**\n * Starts a given cloud job, which will process asynchronously.\n *\n * @function startJob\n * @name Parse.Cloud.startJob\n * @param {string} name The function name.\n * @param {object} data The parameters to send to the cloud function.\n * @returns {Promise} A promise that will be resolved with the jobStatusId\n * of the job.\n */\nfunction startJob(name, data) {\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud job name must be a string.');\n  }\n  return _CoreManager.default.getCloudController().startJob(name, data, {\n    useMasterKey: true\n  });\n}\n\n/**\n * Gets job status by Id\n *\n * @function getJobStatus\n * @name Parse.Cloud.getJobStatus\n * @param {string} jobStatusId The Id of Job Status.\n * @returns {Parse.Object} Status of Job.\n */\nfunction getJobStatus(jobStatusId) {\n  const query = new _ParseQuery.default('_JobStatus');\n  return query.get(jobStatusId, {\n    useMasterKey: true\n  });\n}\nconst DefaultController = {\n  run(name, data, options) {\n    const RESTController = _CoreManager.default.getRESTController();\n    const payload = (0, _encode.default)(data, true);\n    const request = RESTController.request('POST', 'functions/' + name, payload, options);\n    return request.then(res => {\n      if (typeof res === 'object' && (0, _keys.default)(res).length > 0 && !res.hasOwnProperty('result')) {\n        throw new _ParseError.default(_ParseError.default.INVALID_JSON, 'The server returned an invalid response.');\n      }\n      const decoded = (0, _decode.default)(res);\n      if (decoded && decoded.hasOwnProperty('result')) {\n        return _promise.default.resolve(decoded.result);\n      }\n      return _promise.default.resolve(undefined);\n    });\n  },\n  getJobsData(options) {\n    const RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'cloud_code/jobs/data', null, options);\n  },\n  async startJob(name, data, options) {\n    const RESTController = _CoreManager.default.getRESTController();\n    const payload = (0, _encode.default)(data, true);\n    options.returnStatus = true;\n    const response = await RESTController.request('POST', 'jobs/' + name, payload, options);\n    return response._headers?.['X-Parse-Job-Status-Id'];\n  }\n};\n_CoreManager.default.setCloudController(DefaultController);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}