{"ast":null,"code":"var _jsxFileName = \"/home/mavrik/Documents/classes/web-dev/feature05/src/Components/Auth/AuthRegister.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createUser } from \"./AuthService\";\nimport AuthForm from \"./AuthForm\";\nimport { useAuth } from \"./AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthRegister = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    isAuthenticated,\n    setIsAuthenticated\n  } = useAuth();\n  const [newUser, setNewUser] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\"\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  useEffect(() => {\n    if (isAuthenticated) {\n      alert(\"You are already logged in\");\n      navigate(\"/pokemon\");\n    }\n  }, [isAuthenticated, navigate]);\n  const onChangeHandler = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewUser(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const onSubmitHandler = async e => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    try {\n      const userCreated = await createUser(newUser);\n      if (userCreated) {\n        alert(`${userCreated.get(\"firstName\")}, you successfully registered!`);\n        setIsAuthenticated(true); // update AuthContext\n        navigate(\"/pokemon\"); // redirect to Pokemkon\n      }\n    } catch (error) {\n      // error handled in AuthService\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthForm, {\n    user: newUser,\n    onChange: onChangeHandler,\n    onSubmit: onSubmitHandler,\n    disabled: isSubmitting\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthRegister, \"o0y4G2zMJgd10XeBMKF3ZgdCrK8=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = AuthRegister;\nexport default AuthRegister;\nvar _c;\n$RefreshReg$(_c, \"AuthRegister\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","createUser","AuthForm","useAuth","jsxDEV","_jsxDEV","AuthRegister","_s","navigate","isAuthenticated","setIsAuthenticated","newUser","setNewUser","firstName","lastName","email","password","isSubmitting","setIsSubmitting","alert","onChangeHandler","e","name","value","target","prev","onSubmitHandler","preventDefault","userCreated","get","error","user","onChange","onSubmit","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mavrik/Documents/classes/web-dev/feature05/src/Components/Auth/AuthRegister.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { createUser } from \"./AuthService\";\r\nimport AuthForm from \"./AuthForm\";\r\nimport { useAuth } from \"./AuthContext\";\r\n\r\nconst AuthRegister = () => {\r\n  const navigate = useNavigate();\r\n  const { isAuthenticated, setIsAuthenticated } = useAuth();\r\n  const [newUser, setNewUser] = useState({\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      alert(\"You are already logged in\");\r\n      navigate(\"/pokemon\");\r\n    }\r\n  }, [isAuthenticated, navigate]);\r\n\r\n  const onChangeHandler = (e) => {\r\n    const { name, value } = e.target;\r\n    setNewUser((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const onSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n    setIsSubmitting(true);\r\n    try {\r\n      const userCreated = await createUser(newUser);\r\n      if (userCreated) {\r\n        alert(`${userCreated.get(\"firstName\")}, you successfully registered!`);\r\n        setIsAuthenticated(true); // update AuthContext\r\n        navigate(\"/pokemon\"); // redirect to Pokemkon\r\n      }\r\n    } catch (error) {\r\n      // error handled in AuthService\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthForm\r\n      user={newUser}\r\n      onChange={onChangeHandler}\r\n      onSubmit={onSubmitHandler}\r\n      disabled={isSubmitting}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AuthRegister;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,UAAU,QAAQ,eAAe;AAC1C,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAES,eAAe;IAAEC;EAAmB,CAAC,GAAGP,OAAO,CAAC,CAAC;EACzD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC;IACrCe,SAAS,EAAE,EAAE;IACbC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACZ,CAAC,CAAC;EACF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd,IAAIU,eAAe,EAAE;MACnBU,KAAK,CAAC,2BAA2B,CAAC;MAClCX,QAAQ,CAAC,UAAU,CAAC;IACtB;EACF,CAAC,EAAE,CAACC,eAAe,EAAED,QAAQ,CAAC,CAAC;EAE/B,MAAMY,eAAe,GAAIC,CAAC,IAAK;IAC7B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCZ,UAAU,CAAEa,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAE,CAACH,IAAI,GAAGC;IAAM,CAAC,CAAC,CAAC;EACpD,CAAC;EAED,MAAMG,eAAe,GAAG,MAAOL,CAAC,IAAK;IACnCA,CAAC,CAACM,cAAc,CAAC,CAAC;IAClBT,eAAe,CAAC,IAAI,CAAC;IACrB,IAAI;MACF,MAAMU,WAAW,GAAG,MAAM3B,UAAU,CAACU,OAAO,CAAC;MAC7C,IAAIiB,WAAW,EAAE;QACfT,KAAK,CAAC,GAAGS,WAAW,CAACC,GAAG,CAAC,WAAW,CAAC,gCAAgC,CAAC;QACtEnB,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1BF,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;MACxB;IACF,CAAC,CAAC,OAAOsB,KAAK,EAAE;MACd;IAAA,CACD,SAAS;MACRZ,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,oBACEb,OAAA,CAACH,QAAQ;IACP6B,IAAI,EAAEpB,OAAQ;IACdqB,QAAQ,EAAEZ,eAAgB;IAC1Ba,QAAQ,EAAEP,eAAgB;IAC1BQ,QAAQ,EAAEjB;EAAa;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEN,CAAC;AAAC/B,EAAA,CAhDID,YAAY;EAAA,QACCN,WAAW,EACoBG,OAAO;AAAA;AAAAoC,EAAA,GAFnDjC,YAAY;AAkDlB,eAAeA,YAAY;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}