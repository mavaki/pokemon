{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _LiveQueryClient = _interopRequireDefault(require(\"./LiveQueryClient\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nfunction getLiveQueryClient() {\n  return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n}\n\n/**\n * We expose three events to help you monitor the status of the WebSocket connection:\n *\n * <p>Open - When we establish the WebSocket connection to the LiveQuery server, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('open', () => {\n *\n * });</pre></p>\n *\n * <p>Close - When we lose the WebSocket connection to the LiveQuery server, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('close', () => {\n *\n * });</pre></p>\n *\n * <p>Error - When some network error or LiveQuery server error happens, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('error', (error) => {\n *\n * });</pre></p>\n *\n * @class Parse.LiveQuery\n * @static\n */\nclass LiveQuery {\n  constructor() {\n    var _this = this;\n    (0, _defineProperty2.default)(this, \"emitter\", void 0);\n    (0, _defineProperty2.default)(this, \"on\", void 0);\n    (0, _defineProperty2.default)(this, \"emit\", void 0);\n    const EventEmitter = _CoreManager.default.getEventEmitter();\n    this.emitter = new EventEmitter();\n    this.on = (eventName, listener) => this.emitter.on(eventName, listener);\n    this.emit = function (eventName) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      return _this.emitter.emit(eventName, ...args);\n    };\n    // adding listener so process does not crash\n    // best practice is for developer to register their own listener\n    this.on('error', () => {});\n  }\n\n  /**\n   * After open is called, the LiveQuery will try to send a connect request\n   * to the LiveQuery server.\n   */\n  async open() {\n    const liveQueryClient = await getLiveQueryClient();\n    liveQueryClient.open();\n  }\n\n  /**\n   * When you're done using LiveQuery, you can call Parse.LiveQuery.close().\n   * This function will close the WebSocket connection to the LiveQuery server,\n   * cancel the auto reconnect, and unsubscribe all subscriptions based on it.\n   * If you call query.subscribe() after this, we'll create a new WebSocket\n   * connection to the LiveQuery server.\n   */\n  async close() {\n    const liveQueryClient = await getLiveQueryClient();\n    liveQueryClient.close();\n  }\n}\nvar _default = exports.default = LiveQuery;\nlet defaultLiveQueryClient;\nconst DefaultLiveQueryController = {\n  setDefaultLiveQueryClient(liveQueryClient) {\n    defaultLiveQueryClient = liveQueryClient;\n  },\n  async getDefaultLiveQueryClient() {\n    if (defaultLiveQueryClient) {\n      return defaultLiveQueryClient;\n    }\n    const [currentUser, installationId] = await _promise.default.all([_CoreManager.default.getUserController().currentUserAsync(), _CoreManager.default.getInstallationController().currentInstallationId()]);\n    const sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n    let liveQueryServerURL = _CoreManager.default.get('LIVEQUERY_SERVER_URL');\n    if (liveQueryServerURL && (0, _indexOf.default)(liveQueryServerURL).call(liveQueryServerURL, 'ws') !== 0) {\n      throw new Error('You need to set a proper Parse LiveQuery server url before using LiveQueryClient');\n    }\n\n    // If we can not find Parse.liveQueryServerURL, we try to extract it from Parse.serverURL\n    if (!liveQueryServerURL) {\n      const serverURL = _CoreManager.default.get('SERVER_URL');\n      const protocol = (0, _indexOf.default)(serverURL).call(serverURL, 'https') === 0 ? 'wss://' : 'ws://';\n      const host = serverURL.replace(/^https?:\\/\\//, '');\n      liveQueryServerURL = protocol + host;\n      _CoreManager.default.set('LIVEQUERY_SERVER_URL', liveQueryServerURL);\n    }\n    const applicationId = _CoreManager.default.get('APPLICATION_ID');\n    const javascriptKey = _CoreManager.default.get('JAVASCRIPT_KEY');\n    const masterKey = _CoreManager.default.get('MASTER_KEY');\n    defaultLiveQueryClient = new _LiveQueryClient.default({\n      applicationId,\n      serverURL: liveQueryServerURL,\n      javascriptKey,\n      masterKey,\n      sessionToken,\n      installationId\n    });\n    const LiveQuery = _CoreManager.default.getLiveQuery();\n    defaultLiveQueryClient.on('error', error => {\n      LiveQuery.emit('error', error);\n    });\n    defaultLiveQueryClient.on('open', () => {\n      LiveQuery.emit('open');\n    });\n    defaultLiveQueryClient.on('close', () => {\n      LiveQuery.emit('close');\n    });\n    return defaultLiveQueryClient;\n  },\n  _clearCachedDefaultClient() {\n    defaultLiveQueryClient = null;\n  }\n};\n_CoreManager.default.setLiveQueryController(DefaultLiveQueryController);","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_promise","_indexOf","_defineProperty2","_LiveQueryClient","_CoreManager","getLiveQueryClient","getLiveQueryController","getDefaultLiveQueryClient","LiveQuery","constructor","_this","EventEmitter","getEventEmitter","emitter","on","eventName","listener","emit","_len","arguments","length","args","Array","_key","open","liveQueryClient","close","_default","defaultLiveQueryClient","DefaultLiveQueryController","setDefaultLiveQueryClient","currentUser","installationId","all","getUserController","currentUserAsync","getInstallationController","currentInstallationId","sessionToken","getSessionToken","undefined","liveQueryServerURL","get","call","Error","serverURL","protocol","host","replace","set","applicationId","javascriptKey","masterKey","getLiveQuery","error","_clearCachedDefaultClient","setLiveQueryController"],"sources":["/home/mavrik/Documents/github/pokemon/node_modules/parse/lib/browser/ParseLiveQuery.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _LiveQueryClient = _interopRequireDefault(require(\"./LiveQueryClient\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nfunction getLiveQueryClient() {\n  return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n}\n\n/**\n * We expose three events to help you monitor the status of the WebSocket connection:\n *\n * <p>Open - When we establish the WebSocket connection to the LiveQuery server, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('open', () => {\n *\n * });</pre></p>\n *\n * <p>Close - When we lose the WebSocket connection to the LiveQuery server, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('close', () => {\n *\n * });</pre></p>\n *\n * <p>Error - When some network error or LiveQuery server error happens, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('error', (error) => {\n *\n * });</pre></p>\n *\n * @class Parse.LiveQuery\n * @static\n */\nclass LiveQuery {\n  constructor() {\n    var _this = this;\n    (0, _defineProperty2.default)(this, \"emitter\", void 0);\n    (0, _defineProperty2.default)(this, \"on\", void 0);\n    (0, _defineProperty2.default)(this, \"emit\", void 0);\n    const EventEmitter = _CoreManager.default.getEventEmitter();\n    this.emitter = new EventEmitter();\n    this.on = (eventName, listener) => this.emitter.on(eventName, listener);\n    this.emit = function (eventName) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      return _this.emitter.emit(eventName, ...args);\n    };\n    // adding listener so process does not crash\n    // best practice is for developer to register their own listener\n    this.on('error', () => {});\n  }\n\n  /**\n   * After open is called, the LiveQuery will try to send a connect request\n   * to the LiveQuery server.\n   */\n  async open() {\n    const liveQueryClient = await getLiveQueryClient();\n    liveQueryClient.open();\n  }\n\n  /**\n   * When you're done using LiveQuery, you can call Parse.LiveQuery.close().\n   * This function will close the WebSocket connection to the LiveQuery server,\n   * cancel the auto reconnect, and unsubscribe all subscriptions based on it.\n   * If you call query.subscribe() after this, we'll create a new WebSocket\n   * connection to the LiveQuery server.\n   */\n  async close() {\n    const liveQueryClient = await getLiveQueryClient();\n    liveQueryClient.close();\n  }\n}\nvar _default = exports.default = LiveQuery;\nlet defaultLiveQueryClient;\nconst DefaultLiveQueryController = {\n  setDefaultLiveQueryClient(liveQueryClient) {\n    defaultLiveQueryClient = liveQueryClient;\n  },\n  async getDefaultLiveQueryClient() {\n    if (defaultLiveQueryClient) {\n      return defaultLiveQueryClient;\n    }\n    const [currentUser, installationId] = await _promise.default.all([_CoreManager.default.getUserController().currentUserAsync(), _CoreManager.default.getInstallationController().currentInstallationId()]);\n    const sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n    let liveQueryServerURL = _CoreManager.default.get('LIVEQUERY_SERVER_URL');\n    if (liveQueryServerURL && (0, _indexOf.default)(liveQueryServerURL).call(liveQueryServerURL, 'ws') !== 0) {\n      throw new Error('You need to set a proper Parse LiveQuery server url before using LiveQueryClient');\n    }\n\n    // If we can not find Parse.liveQueryServerURL, we try to extract it from Parse.serverURL\n    if (!liveQueryServerURL) {\n      const serverURL = _CoreManager.default.get('SERVER_URL');\n      const protocol = (0, _indexOf.default)(serverURL).call(serverURL, 'https') === 0 ? 'wss://' : 'ws://';\n      const host = serverURL.replace(/^https?:\\/\\//, '');\n      liveQueryServerURL = protocol + host;\n      _CoreManager.default.set('LIVEQUERY_SERVER_URL', liveQueryServerURL);\n    }\n    const applicationId = _CoreManager.default.get('APPLICATION_ID');\n    const javascriptKey = _CoreManager.default.get('JAVASCRIPT_KEY');\n    const masterKey = _CoreManager.default.get('MASTER_KEY');\n    defaultLiveQueryClient = new _LiveQueryClient.default({\n      applicationId,\n      serverURL: liveQueryServerURL,\n      javascriptKey,\n      masterKey,\n      sessionToken,\n      installationId\n    });\n    const LiveQuery = _CoreManager.default.getLiveQuery();\n    defaultLiveQueryClient.on('error', error => {\n      LiveQuery.emit('error', error);\n    });\n    defaultLiveQueryClient.on('open', () => {\n      LiveQuery.emit('open');\n    });\n    defaultLiveQueryClient.on('close', () => {\n      LiveQuery.emit('close');\n    });\n    return defaultLiveQueryClient;\n  },\n  _clearCachedDefaultClient() {\n    defaultLiveQueryClient = null;\n  }\n};\n_CoreManager.default.setLiveQueryController(DefaultLiveQueryController);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}