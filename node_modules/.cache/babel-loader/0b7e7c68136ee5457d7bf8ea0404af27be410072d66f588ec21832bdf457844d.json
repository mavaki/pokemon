{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n/**\n * Represents a Role on the Parse server. Roles represent groupings of\n * Users for the purposes of granting permissions (e.g. specifying an ACL\n * for an Object). Roles are specified by their sets of child users and\n * child roles, all of which are granted any permissions that the parent\n * role has.\n *\n * <p>Roles must have a name (which cannot be changed after creation of the\n * role), and must specify an ACL.</p>\n *\n * @alias Parse.Role\n * @augments Parse.Object\n */\nclass ParseRole extends _ParseObject.default {\n  /**\n   * @param {string} name The name of the Role to create.\n   * @param {Parse.ACL} acl The ACL for this role. Roles must have an ACL.\n   * A Parse.Role is a local representation of a role persisted to the Parse\n   * cloud.\n   */\n  constructor(name, acl) {\n    super('_Role');\n    if (typeof name === 'string' && acl instanceof _ParseACL.default) {\n      this.setName(name);\n      this.setACL(acl);\n    }\n  }\n\n  /**\n   * Gets the name of the role.  You can alternatively call role.get(\"name\")\n   *\n   * @returns {string} the name of the role.\n   */\n  getName() {\n    const name = this.get('name');\n    if (name == null || typeof name === 'string') {\n      return name;\n    }\n    return '';\n  }\n\n  /**\n   * Sets the name for a role. This value must be set before the role has\n   * been saved to the server, and cannot be set once the role has been\n   * saved.\n   *\n   * <p>\n   *   A role's name can only contain alphanumeric characters, _, -, and\n   *   spaces.\n   * </p>\n   *\n   * <p>This is equivalent to calling role.set(\"name\", name)</p>\n   *\n   * @param {string} name The name of the role.\n   * @param {object} options Standard options object with success and error\n   *     callbacks.\n   * @returns {(ParseObject|boolean)} true if the set succeeded.\n   */\n  setName(name, options) {\n    this._validateName(name);\n    return this.set('name', name, options);\n  }\n\n  /**\n   * Gets the Parse.Relation for the Parse.Users that are direct\n   * children of this role. These users are granted any privileges that this\n   * role has been granted (e.g. read or write access through ACLs). You can\n   * add or remove users from the role through this relation.\n   *\n   * <p>This is equivalent to calling role.relation(\"users\")</p>\n   *\n   * @returns {Parse.Relation} the relation for the users belonging to this\n   *     role.\n   */\n  getUsers() {\n    return this.relation('users');\n  }\n\n  /**\n   * Gets the Parse.Relation for the Parse.Roles that are direct\n   * children of this role. These roles' users are granted any privileges that\n   * this role has been granted (e.g. read or write access through ACLs). You\n   * can add or remove child roles from this role through this relation.\n   *\n   * <p>This is equivalent to calling role.relation(\"roles\")</p>\n   *\n   * @returns {Parse.Relation} the relation for the roles belonging to this\n   *     role.\n   */\n  getRoles() {\n    return this.relation('roles');\n  }\n  _validateName(newName) {\n    if (typeof newName !== 'string') {\n      throw new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name must be a String.\");\n    }\n    if (!/^[0-9a-zA-Z\\-_ ]+$/.test(newName)) {\n      throw new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name can be only contain alphanumeric characters, _, \" + '-, and spaces.');\n    }\n  }\n  validate(attrs, options) {\n    const isInvalid = super.validate(attrs, options);\n    if (isInvalid) {\n      return isInvalid;\n    }\n    if ('name' in attrs && attrs.name !== this.getName()) {\n      const newName = attrs.name;\n      if (this.id && this.id !== attrs.objectId) {\n        // Check to see if the objectId being set matches this.id\n        // This happens during a fetch -- the id is set before calling fetch\n        // Let the name be set in this case\n        return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name can only be set before it has been saved.\");\n      }\n      try {\n        this._validateName(newName);\n      } catch (e) {\n        return e;\n      }\n    }\n    return false;\n  }\n}\n_CoreManager.default.setParseRole(ParseRole);\n_ParseObject.default.registerSubclass('_Role', ParseRole);\nvar _default = exports.default = ParseRole;","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_CoreManager","_ParseACL","_ParseError","_ParseObject","ParseRole","constructor","name","acl","setName","setACL","getName","get","options","_validateName","set","getUsers","relation","getRoles","newName","OTHER_CAUSE","test","validate","attrs","isInvalid","id","objectId","e","setParseRole","registerSubclass","_default"],"sources":["/home/mavrik/Documents/github/pokemon/node_modules/parse/lib/browser/ParseRole.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n/**\n * Represents a Role on the Parse server. Roles represent groupings of\n * Users for the purposes of granting permissions (e.g. specifying an ACL\n * for an Object). Roles are specified by their sets of child users and\n * child roles, all of which are granted any permissions that the parent\n * role has.\n *\n * <p>Roles must have a name (which cannot be changed after creation of the\n * role), and must specify an ACL.</p>\n *\n * @alias Parse.Role\n * @augments Parse.Object\n */\nclass ParseRole extends _ParseObject.default {\n  /**\n   * @param {string} name The name of the Role to create.\n   * @param {Parse.ACL} acl The ACL for this role. Roles must have an ACL.\n   * A Parse.Role is a local representation of a role persisted to the Parse\n   * cloud.\n   */\n  constructor(name, acl) {\n    super('_Role');\n    if (typeof name === 'string' && acl instanceof _ParseACL.default) {\n      this.setName(name);\n      this.setACL(acl);\n    }\n  }\n\n  /**\n   * Gets the name of the role.  You can alternatively call role.get(\"name\")\n   *\n   * @returns {string} the name of the role.\n   */\n  getName() {\n    const name = this.get('name');\n    if (name == null || typeof name === 'string') {\n      return name;\n    }\n    return '';\n  }\n\n  /**\n   * Sets the name for a role. This value must be set before the role has\n   * been saved to the server, and cannot be set once the role has been\n   * saved.\n   *\n   * <p>\n   *   A role's name can only contain alphanumeric characters, _, -, and\n   *   spaces.\n   * </p>\n   *\n   * <p>This is equivalent to calling role.set(\"name\", name)</p>\n   *\n   * @param {string} name The name of the role.\n   * @param {object} options Standard options object with success and error\n   *     callbacks.\n   * @returns {(ParseObject|boolean)} true if the set succeeded.\n   */\n  setName(name, options) {\n    this._validateName(name);\n    return this.set('name', name, options);\n  }\n\n  /**\n   * Gets the Parse.Relation for the Parse.Users that are direct\n   * children of this role. These users are granted any privileges that this\n   * role has been granted (e.g. read or write access through ACLs). You can\n   * add or remove users from the role through this relation.\n   *\n   * <p>This is equivalent to calling role.relation(\"users\")</p>\n   *\n   * @returns {Parse.Relation} the relation for the users belonging to this\n   *     role.\n   */\n  getUsers() {\n    return this.relation('users');\n  }\n\n  /**\n   * Gets the Parse.Relation for the Parse.Roles that are direct\n   * children of this role. These roles' users are granted any privileges that\n   * this role has been granted (e.g. read or write access through ACLs). You\n   * can add or remove child roles from this role through this relation.\n   *\n   * <p>This is equivalent to calling role.relation(\"roles\")</p>\n   *\n   * @returns {Parse.Relation} the relation for the roles belonging to this\n   *     role.\n   */\n  getRoles() {\n    return this.relation('roles');\n  }\n  _validateName(newName) {\n    if (typeof newName !== 'string') {\n      throw new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name must be a String.\");\n    }\n    if (!/^[0-9a-zA-Z\\-_ ]+$/.test(newName)) {\n      throw new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name can be only contain alphanumeric characters, _, \" + '-, and spaces.');\n    }\n  }\n  validate(attrs, options) {\n    const isInvalid = super.validate(attrs, options);\n    if (isInvalid) {\n      return isInvalid;\n    }\n    if ('name' in attrs && attrs.name !== this.getName()) {\n      const newName = attrs.name;\n      if (this.id && this.id !== attrs.objectId) {\n        // Check to see if the objectId being set matches this.id\n        // This happens during a fetch -- the id is set before calling fetch\n        // Let the name be set in this case\n        return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name can only be set before it has been saved.\");\n      }\n      try {\n        this._validateName(newName);\n      } catch (e) {\n        return e;\n      }\n    }\n    return false;\n  }\n}\n_CoreManager.default.setParseRole(ParseRole);\n_ParseObject.default.registerSubclass('_Role', ParseRole);\nvar _default = exports.default = ParseRole;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}