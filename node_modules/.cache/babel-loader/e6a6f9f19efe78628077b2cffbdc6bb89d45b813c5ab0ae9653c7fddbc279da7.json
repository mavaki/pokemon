{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\nvar _uuid = _interopRequireDefault(require(\"./uuid\"));\nlet registered = false;\n\n/**\n * Provides utility functions for working with Anonymously logged-in users. <br />\n * Anonymous users have some unique characteristics:\n * <ul>\n *  <li>Anonymous users don't need a user name or password.</li>\n *  <ul>\n *    <li>Once logged out, an anonymous user cannot be recovered.</li>\n *  </ul>\n *  <li>signUp converts an anonymous user to a standard user with the given username and password.</li>\n *  <ul>\n *    <li>Data associated with the anonymous user is retained.</li>\n *  </ul>\n *  <li>logIn switches users without converting the anonymous user.</li>\n *  <ul>\n *    <li>Data associated with the anonymous user will be lost.</li>\n *  </ul>\n *  <li>Service logIn (e.g. Facebook, Twitter) will attempt to convert\n *  the anonymous user into a standard user by linking it to the service.</li>\n *  <ul>\n *    <li>If a user already exists that is linked to the service, it will instead switch to the existing user.</li>\n *  </ul>\n *  <li>Service linking (e.g. Facebook, Twitter) will convert the anonymous user\n *  into a standard user by linking it to the service.</li>\n * </ul>\n *\n * @class Parse.AnonymousUtils\n * @static\n */\nconst AnonymousUtils = {\n  /**\n   * Gets whether the user has their account linked to anonymous user.\n   *\n   * @function isLinked\n   * @name Parse.AnonymousUtils.isLinked\n   * @param {Parse.User} user User to check for.\n   *     The user must be logged in on this device.\n   * @returns {boolean} <code>true</code> if the user has their account\n   *     linked to an anonymous user.\n   * @static\n   */\n  isLinked(user) {\n    const provider = this._getAuthProvider();\n    return user._isLinked(provider.getAuthType());\n  },\n  /**\n   * Logs in a user Anonymously.\n   *\n   * @function logIn\n   * @name Parse.AnonymousUtils.logIn\n   * @param {object} options MasterKey / SessionToken.\n   * @returns {Promise} Logged in user\n   * @static\n   */\n  logIn(options) {\n    const provider = this._getAuthProvider();\n    return _ParseUser.default.logInWith(provider.getAuthType(), provider.getAuthData(), options);\n  },\n  /**\n   * Links Anonymous User to an existing PFUser.\n   *\n   * @function link\n   * @name Parse.AnonymousUtils.link\n   * @param {Parse.User} user User to link. This must be the current user.\n   * @param {object} options MasterKey / SessionToken.\n   * @returns {Promise} Linked with User\n   * @static\n   */\n  link(user, options) {\n    const provider = this._getAuthProvider();\n    return user.linkWith(provider.getAuthType(), provider.getAuthData(), options);\n  },\n  /**\n   * Returns true if Authentication Provider has been registered for use.\n   *\n   * @function isRegistered\n   * @name Parse.AnonymousUtils.isRegistered\n   * @returns {boolean}\n   * @static\n   */\n  isRegistered() {\n    return registered;\n  },\n  _getAuthProvider() {\n    const provider = {\n      restoreAuthentication() {\n        return true;\n      },\n      getAuthType() {\n        return 'anonymous';\n      },\n      getAuthData() {\n        return {\n          authData: {\n            id: (0, _uuid.default)()\n          }\n        };\n      }\n    };\n    if (!registered) {\n      _ParseUser.default._registerAuthenticationProvider(provider);\n      registered = true;\n    }\n    return provider;\n  }\n};\nvar _default = exports.default = AnonymousUtils;","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_ParseUser","_uuid","registered","AnonymousUtils","isLinked","user","provider","_getAuthProvider","_isLinked","getAuthType","logIn","options","logInWith","getAuthData","link","linkWith","isRegistered","restoreAuthentication","authData","id","_registerAuthenticationProvider","_default"],"sources":["/home/mavrik/Documents/classes/web-dev/pokemon/node_modules/parse/lib/browser/AnonymousUtils.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\nvar _uuid = _interopRequireDefault(require(\"./uuid\"));\nlet registered = false;\n\n/**\n * Provides utility functions for working with Anonymously logged-in users. <br />\n * Anonymous users have some unique characteristics:\n * <ul>\n *  <li>Anonymous users don't need a user name or password.</li>\n *  <ul>\n *    <li>Once logged out, an anonymous user cannot be recovered.</li>\n *  </ul>\n *  <li>signUp converts an anonymous user to a standard user with the given username and password.</li>\n *  <ul>\n *    <li>Data associated with the anonymous user is retained.</li>\n *  </ul>\n *  <li>logIn switches users without converting the anonymous user.</li>\n *  <ul>\n *    <li>Data associated with the anonymous user will be lost.</li>\n *  </ul>\n *  <li>Service logIn (e.g. Facebook, Twitter) will attempt to convert\n *  the anonymous user into a standard user by linking it to the service.</li>\n *  <ul>\n *    <li>If a user already exists that is linked to the service, it will instead switch to the existing user.</li>\n *  </ul>\n *  <li>Service linking (e.g. Facebook, Twitter) will convert the anonymous user\n *  into a standard user by linking it to the service.</li>\n * </ul>\n *\n * @class Parse.AnonymousUtils\n * @static\n */\nconst AnonymousUtils = {\n  /**\n   * Gets whether the user has their account linked to anonymous user.\n   *\n   * @function isLinked\n   * @name Parse.AnonymousUtils.isLinked\n   * @param {Parse.User} user User to check for.\n   *     The user must be logged in on this device.\n   * @returns {boolean} <code>true</code> if the user has their account\n   *     linked to an anonymous user.\n   * @static\n   */\n  isLinked(user) {\n    const provider = this._getAuthProvider();\n    return user._isLinked(provider.getAuthType());\n  },\n  /**\n   * Logs in a user Anonymously.\n   *\n   * @function logIn\n   * @name Parse.AnonymousUtils.logIn\n   * @param {object} options MasterKey / SessionToken.\n   * @returns {Promise} Logged in user\n   * @static\n   */\n  logIn(options) {\n    const provider = this._getAuthProvider();\n    return _ParseUser.default.logInWith(provider.getAuthType(), provider.getAuthData(), options);\n  },\n  /**\n   * Links Anonymous User to an existing PFUser.\n   *\n   * @function link\n   * @name Parse.AnonymousUtils.link\n   * @param {Parse.User} user User to link. This must be the current user.\n   * @param {object} options MasterKey / SessionToken.\n   * @returns {Promise} Linked with User\n   * @static\n   */\n  link(user, options) {\n    const provider = this._getAuthProvider();\n    return user.linkWith(provider.getAuthType(), provider.getAuthData(), options);\n  },\n  /**\n   * Returns true if Authentication Provider has been registered for use.\n   *\n   * @function isRegistered\n   * @name Parse.AnonymousUtils.isRegistered\n   * @returns {boolean}\n   * @static\n   */\n  isRegistered() {\n    return registered;\n  },\n  _getAuthProvider() {\n    const provider = {\n      restoreAuthentication() {\n        return true;\n      },\n      getAuthType() {\n        return 'anonymous';\n      },\n      getAuthData() {\n        return {\n          authData: {\n            id: (0, _uuid.default)()\n          }\n        };\n      }\n    };\n    if (!registered) {\n      _ParseUser.default._registerAuthenticationProvider(provider);\n      registered = true;\n    }\n    return provider;\n  }\n};\nvar _default = exports.default = AnonymousUtils;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8DAA8D,CAAC;AACpG,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,sDAAsD,CAAC;AAC5FD,sBAAsB,CAACG,OAAO,EAAE,YAAY,EAAE;EAC5CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxB,IAAIC,UAAU,GAAGJ,sBAAsB,CAACD,OAAO,CAAC,aAAa,CAAC,CAAC;AAC/D,IAAIM,KAAK,GAAGL,sBAAsB,CAACD,OAAO,CAAC,QAAQ,CAAC,CAAC;AACrD,IAAIO,UAAU,GAAG,KAAK;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG;EACrB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQA,CAACC,IAAI,EAAE;IACb,MAAMC,QAAQ,GAAG,IAAI,CAACC,gBAAgB,CAAC,CAAC;IACxC,OAAOF,IAAI,CAACG,SAAS,CAACF,QAAQ,CAACG,WAAW,CAAC,CAAC,CAAC;EAC/C,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,KAAKA,CAACC,OAAO,EAAE;IACb,MAAML,QAAQ,GAAG,IAAI,CAACC,gBAAgB,CAAC,CAAC;IACxC,OAAOP,UAAU,CAACD,OAAO,CAACa,SAAS,CAACN,QAAQ,CAACG,WAAW,CAAC,CAAC,EAAEH,QAAQ,CAACO,WAAW,CAAC,CAAC,EAAEF,OAAO,CAAC;EAC9F,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,IAAIA,CAACT,IAAI,EAAEM,OAAO,EAAE;IAClB,MAAML,QAAQ,GAAG,IAAI,CAACC,gBAAgB,CAAC,CAAC;IACxC,OAAOF,IAAI,CAACU,QAAQ,CAACT,QAAQ,CAACG,WAAW,CAAC,CAAC,EAAEH,QAAQ,CAACO,WAAW,CAAC,CAAC,EAAEF,OAAO,CAAC;EAC/E,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,YAAYA,CAAA,EAAG;IACb,OAAOd,UAAU;EACnB,CAAC;EACDK,gBAAgBA,CAAA,EAAG;IACjB,MAAMD,QAAQ,GAAG;MACfW,qBAAqBA,CAAA,EAAG;QACtB,OAAO,IAAI;MACb,CAAC;MACDR,WAAWA,CAAA,EAAG;QACZ,OAAO,WAAW;MACpB,CAAC;MACDI,WAAWA,CAAA,EAAG;QACZ,OAAO;UACLK,QAAQ,EAAE;YACRC,EAAE,EAAE,CAAC,CAAC,EAAElB,KAAK,CAACF,OAAO,EAAE;UACzB;QACF,CAAC;MACH;IACF,CAAC;IACD,IAAI,CAACG,UAAU,EAAE;MACfF,UAAU,CAACD,OAAO,CAACqB,+BAA+B,CAACd,QAAQ,CAAC;MAC5DJ,UAAU,GAAG,IAAI;IACnB;IACA,OAAOI,QAAQ;EACjB;AACF,CAAC;AACD,IAAIe,QAAQ,GAAGxB,OAAO,CAACE,OAAO,GAAGI,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}