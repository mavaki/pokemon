{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _set = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/set\"));\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\nvar _filter = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\nvar _startsWith = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/starts-with\"));\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\nvar _from = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/from\"));\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _LocalDatastoreController = _interopRequireDefault(require(\"./LocalDatastoreController\"));\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n/**\n * Provides a local datastore which can be used to store and retrieve <code>Parse.Object</code>. <br />\n * To enable this functionality, call <code>Parse.enableLocalDatastore()</code>.\n *\n * Pin object to add to local datastore\n *\n * <pre>await object.pin();</pre>\n * <pre>await object.pinWithName('pinName');</pre>\n *\n * Query pinned objects\n *\n * <pre>query.fromLocalDatastore();</pre>\n * <pre>query.fromPin();</pre>\n * <pre>query.fromPinWithName();</pre>\n *\n * <pre>const localObjects = await query.find();</pre>\n *\n * @class Parse.LocalDatastore\n * @static\n */\nconst LocalDatastore = {\n  isEnabled: false,\n  isSyncing: false,\n  fromPinWithName(name) {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n    return controller.fromPinWithName(name);\n  },\n  async pinWithName(name, value) {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n    return controller.pinWithName(name, value);\n  },\n  async unPinWithName(name) {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n    return controller.unPinWithName(name);\n  },\n  _getAllContents() {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n    return controller.getAllContents();\n  },\n  // Use for testing\n  async _getRawStorage() {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n    return controller.getRawStorage();\n  },\n  async _clear() {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n    return controller.clear();\n  },\n  // Pin the object and children recursively\n  // Saves the object and children key to Pin Name\n  async _handlePinAllWithName(name, objects) {\n    const pinName = this.getPinName(name);\n    const toPinPromises = [];\n    const objectKeys = [];\n    for (const parent of objects) {\n      const children = this._getChildren(parent);\n      const parentKey = this.getKeyForObject(parent);\n      const json = parent._toFullJSON(undefined, true);\n      if (parent._localId) {\n        json._localId = parent._localId;\n      }\n      children[parentKey] = json;\n      for (const objectKey in children) {\n        objectKeys.push(objectKey);\n        toPinPromises.push(this.pinWithName(objectKey, [children[objectKey]]));\n      }\n    }\n    const fromPinPromise = this.fromPinWithName(pinName);\n    const [pinned] = await _promise.default.all([fromPinPromise, toPinPromises]);\n    const toPin = [...new _set.default([...(pinned || []), ...objectKeys])];\n    return this.pinWithName(pinName, toPin);\n  },\n  // Removes object and children keys from pin name\n  // Keeps the object and children pinned\n  async _handleUnPinAllWithName(name, objects) {\n    const localDatastore = await this._getAllContents();\n    const pinName = this.getPinName(name);\n    const promises = [];\n    let objectKeys = [];\n    for (const parent of objects) {\n      const children = this._getChildren(parent);\n      const parentKey = this.getKeyForObject(parent);\n      objectKeys.push(parentKey, ...(0, _keys.default)(children));\n    }\n    objectKeys = [...new _set.default(objectKeys)];\n    let pinned = localDatastore[pinName] || [];\n    pinned = (0, _filter.default)(pinned).call(pinned, item => !(0, _includes.default)(objectKeys).call(objectKeys, item));\n    if (pinned.length == 0) {\n      promises.push(this.unPinWithName(pinName));\n      delete localDatastore[pinName];\n    } else {\n      promises.push(this.pinWithName(pinName, pinned));\n      localDatastore[pinName] = pinned;\n    }\n    for (const objectKey of objectKeys) {\n      let hasReference = false;\n      for (const key in localDatastore) {\n        if (key === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.PIN_PREFIX)) {\n          const pinnedObjects = localDatastore[key] || [];\n          if ((0, _includes.default)(pinnedObjects).call(pinnedObjects, objectKey)) {\n            hasReference = true;\n            break;\n          }\n        }\n      }\n      if (!hasReference) {\n        promises.push(this.unPinWithName(objectKey));\n      }\n    }\n    return _promise.default.all(promises);\n  },\n  // Retrieve all pointer fields from object recursively\n  _getChildren(object) {\n    const encountered = {};\n    const json = object._toFullJSON(undefined, true);\n    for (const key in json) {\n      if (json[key] && json[key].__type && json[key].__type === 'Object') {\n        this._traverse(json[key], encountered);\n      }\n    }\n    return encountered;\n  },\n  _traverse(object, encountered) {\n    if (!object.objectId) {\n      return;\n    } else {\n      const objectKey = this.getKeyForObject(object);\n      if (encountered[objectKey]) {\n        return;\n      }\n      encountered[objectKey] = object;\n    }\n    for (const key in object) {\n      let json = object[key];\n      if (!object[key]) {\n        json = object;\n      }\n      if (json.__type && json.__type === 'Object') {\n        this._traverse(json, encountered);\n      }\n    }\n  },\n  // Transform keys in pin name to objects\n  async _serializeObjectsFromPinName(name) {\n    var _context;\n    const localDatastore = await this._getAllContents();\n    const allObjects = [];\n    for (const key in localDatastore) {\n      if ((0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.OBJECT_PREFIX)) {\n        allObjects.push(localDatastore[key][0]);\n      }\n    }\n    if (!name) {\n      return allObjects;\n    }\n    const pinName = this.getPinName(name);\n    const pinned = localDatastore[pinName];\n    if (!(0, _isArray.default)(pinned)) {\n      return [];\n    }\n    const promises = (0, _map.default)(pinned).call(pinned, objectKey => this.fromPinWithName(objectKey));\n    let objects = await _promise.default.all(promises);\n    objects = (0, _concat.default)(_context = []).call(_context, ...objects);\n    return (0, _filter.default)(objects).call(objects, object => object != null);\n  },\n  // Replaces object pointers with pinned pointers\n  // The object pointers may contain old data\n  // Uses Breadth First Search Algorithm\n  async _serializeObject(objectKey, localDatastore) {\n    let LDS = localDatastore;\n    if (!LDS) {\n      LDS = await this._getAllContents();\n    }\n    if (!LDS[objectKey] || LDS[objectKey].length === 0) {\n      return null;\n    }\n    const root = LDS[objectKey][0];\n    const queue = [];\n    const meta = {};\n    let uniqueId = 0;\n    meta[uniqueId] = root;\n    queue.push(uniqueId);\n    while (queue.length !== 0) {\n      const nodeId = queue.shift();\n      const subTreeRoot = meta[nodeId];\n      for (const field in subTreeRoot) {\n        const value = subTreeRoot[field];\n        if (value.__type && value.__type === 'Object') {\n          const key = this.getKeyForObject(value);\n          if (LDS[key] && LDS[key].length > 0) {\n            const pointer = LDS[key][0];\n            uniqueId++;\n            meta[uniqueId] = pointer;\n            subTreeRoot[field] = pointer;\n            queue.push(uniqueId);\n          }\n        }\n      }\n    }\n    return root;\n  },\n  // Called when an object is save / fetched\n  // Update object pin value\n  async _updateObjectIfPinned(object) {\n    if (!this.isEnabled) {\n      return;\n    }\n    const objectKey = this.getKeyForObject(object);\n    const pinned = await this.fromPinWithName(objectKey);\n    if (!pinned || pinned.length === 0) {\n      return;\n    }\n    return this.pinWithName(objectKey, [object._toFullJSON()]);\n  },\n  // Called when object is destroyed\n  // Unpin object and remove all references from pin names\n  // TODO: Destroy children?\n  async _destroyObjectIfPinned(object) {\n    if (!this.isEnabled) {\n      return;\n    }\n    const localDatastore = await this._getAllContents();\n    const objectKey = this.getKeyForObject(object);\n    const pin = localDatastore[objectKey];\n    if (!pin) {\n      return;\n    }\n    const promises = [this.unPinWithName(objectKey)];\n    delete localDatastore[objectKey];\n    for (const key in localDatastore) {\n      if (key === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.PIN_PREFIX)) {\n        let pinned = localDatastore[key] || [];\n        if ((0, _includes.default)(pinned).call(pinned, objectKey)) {\n          pinned = (0, _filter.default)(pinned).call(pinned, item => item !== objectKey);\n          if (pinned.length == 0) {\n            promises.push(this.unPinWithName(key));\n            delete localDatastore[key];\n          } else {\n            promises.push(this.pinWithName(key, pinned));\n            localDatastore[key] = pinned;\n          }\n        }\n      }\n    }\n    return _promise.default.all(promises);\n  },\n  // Update pin and references of the unsaved object\n  async _updateLocalIdForObject(localId, object) {\n    if (!this.isEnabled) {\n      return;\n    }\n    const localKey = `${_LocalDatastoreUtils.OBJECT_PREFIX}${object.className}_${localId}`;\n    const objectKey = this.getKeyForObject(object);\n    const unsaved = await this.fromPinWithName(localKey);\n    if (!unsaved || unsaved.length === 0) {\n      return;\n    }\n    const promises = [this.unPinWithName(localKey), this.pinWithName(objectKey, unsaved)];\n    const localDatastore = await this._getAllContents();\n    for (const key in localDatastore) {\n      if (key === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.PIN_PREFIX)) {\n        let pinned = localDatastore[key] || [];\n        if ((0, _includes.default)(pinned).call(pinned, localKey)) {\n          pinned = (0, _filter.default)(pinned).call(pinned, item => item !== localKey);\n          pinned.push(objectKey);\n          promises.push(this.pinWithName(key, pinned));\n          localDatastore[key] = pinned;\n        }\n      }\n    }\n    return _promise.default.all(promises);\n  },\n  /**\n   * Updates Local Datastore from Server\n   *\n   * <pre>\n   * await Parse.LocalDatastore.updateFromServer();\n   * </pre>\n   *\n   * @function updateFromServer\n   * @name Parse.LocalDatastore.updateFromServer\n   * @static\n   */\n  async updateFromServer() {\n    var _context2;\n    if (!this.checkIfEnabled() || this.isSyncing) {\n      return;\n    }\n    const localDatastore = await this._getAllContents();\n    const keys = [];\n    for (const key in localDatastore) {\n      if ((0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.OBJECT_PREFIX)) {\n        keys.push(key);\n      }\n    }\n    if (keys.length === 0) {\n      return;\n    }\n    this.isSyncing = true;\n    const pointersHash = {};\n    for (const key of keys) {\n      // Ignore the OBJECT_PREFIX\n      let [,, className, objectId] = key.split('_');\n\n      // User key is split into [ 'Parse', 'LDS', '', 'User', 'objectId' ]\n      if (key.split('_').length === 5 && key.split('_')[3] === 'User') {\n        className = '_User';\n        objectId = key.split('_')[4];\n      }\n      if ((0, _startsWith.default)(objectId).call(objectId, 'local')) {\n        continue;\n      }\n      if (!(className in pointersHash)) {\n        pointersHash[className] = new _set.default();\n      }\n      pointersHash[className].add(objectId);\n    }\n    const queryPromises = (0, _map.default)(_context2 = (0, _keys.default)(pointersHash)).call(_context2, className => {\n      const objectIds = (0, _from.default)(pointersHash[className]);\n      const query = new _ParseQuery.default(className);\n      query.limit(objectIds.length);\n      if (objectIds.length === 1) {\n        query.equalTo('objectId', objectIds[0]);\n      } else {\n        query.containedIn('objectId', objectIds);\n      }\n      return (0, _find.default)(query).call(query);\n    });\n    try {\n      const responses = await _promise.default.all(queryPromises);\n      const objects = (0, _concat.default)([]).apply([], responses);\n      const pinPromises = (0, _map.default)(objects).call(objects, object => {\n        const objectKey = this.getKeyForObject(object);\n        return this.pinWithName(objectKey, object._toFullJSON());\n      });\n      await _promise.default.all(pinPromises);\n      this.isSyncing = false;\n    } catch (error) {\n      console.error('Error syncing LocalDatastore: ', error);\n      this.isSyncing = false;\n    }\n  },\n  getKeyForObject(object) {\n    const objectId = object.objectId || object._getId();\n    return `${_LocalDatastoreUtils.OBJECT_PREFIX}${object.className}_${objectId}`;\n  },\n  getPinName(pinName) {\n    if (!pinName || pinName === _LocalDatastoreUtils.DEFAULT_PIN) {\n      return _LocalDatastoreUtils.DEFAULT_PIN;\n    }\n    return _LocalDatastoreUtils.PIN_PREFIX + pinName;\n  },\n  checkIfEnabled() {\n    if (!this.isEnabled) {\n      console.error('Parse.enableLocalDatastore() must be called first');\n    }\n    return this.isEnabled;\n  }\n};\nmodule.exports = LocalDatastore;\nvar _default = exports.default = LocalDatastore;\n_CoreManager.default.setLocalDatastoreController(_LocalDatastoreController.default);\n_CoreManager.default.setLocalDatastore(LocalDatastore);","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_promise","_set","_keys","_filter","_includes","_startsWith","_isArray","_map","_concat","_from","_find","_CoreManager","_LocalDatastoreController","_ParseQuery","_LocalDatastoreUtils","LocalDatastore","isEnabled","isSyncing","fromPinWithName","name","controller","getLocalDatastoreController","pinWithName","unPinWithName","_getAllContents","getAllContents","_getRawStorage","getRawStorage","_clear","clear","_handlePinAllWithName","objects","pinName","getPinName","toPinPromises","objectKeys","parent","children","_getChildren","parentKey","getKeyForObject","json","_toFullJSON","undefined","_localId","objectKey","push","fromPinPromise","pinned","all","toPin","_handleUnPinAllWithName","localDatastore","promises","call","item","length","hasReference","key","DEFAULT_PIN","PIN_PREFIX","pinnedObjects","object","encountered","__type","_traverse","objectId","_serializeObjectsFromPinName","_context","allObjects","OBJECT_PREFIX","_serializeObject","LDS","root","queue","meta","uniqueId","nodeId","shift","subTreeRoot","field","pointer","_updateObjectIfPinned","_destroyObjectIfPinned","pin","_updateLocalIdForObject","localId","localKey","className","unsaved","updateFromServer","_context2","checkIfEnabled","keys","pointersHash","split","add","queryPromises","objectIds","query","limit","equalTo","containedIn","responses","apply","pinPromises","error","console","_getId","module","_default","setLocalDatastoreController","setLocalDatastore"],"sources":["/home/mavrik/Documents/classes/web-dev/pokemon/node_modules/parse/lib/browser/LocalDatastore.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _set = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/set\"));\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\nvar _filter = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\nvar _startsWith = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/starts-with\"));\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\nvar _from = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/from\"));\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _LocalDatastoreController = _interopRequireDefault(require(\"./LocalDatastoreController\"));\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n/**\n * Provides a local datastore which can be used to store and retrieve <code>Parse.Object</code>. <br />\n * To enable this functionality, call <code>Parse.enableLocalDatastore()</code>.\n *\n * Pin object to add to local datastore\n *\n * <pre>await object.pin();</pre>\n * <pre>await object.pinWithName('pinName');</pre>\n *\n * Query pinned objects\n *\n * <pre>query.fromLocalDatastore();</pre>\n * <pre>query.fromPin();</pre>\n * <pre>query.fromPinWithName();</pre>\n *\n * <pre>const localObjects = await query.find();</pre>\n *\n * @class Parse.LocalDatastore\n * @static\n */\nconst LocalDatastore = {\n  isEnabled: false,\n  isSyncing: false,\n  fromPinWithName(name) {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n    return controller.fromPinWithName(name);\n  },\n  async pinWithName(name, value) {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n    return controller.pinWithName(name, value);\n  },\n  async unPinWithName(name) {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n    return controller.unPinWithName(name);\n  },\n  _getAllContents() {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n    return controller.getAllContents();\n  },\n  // Use for testing\n  async _getRawStorage() {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n    return controller.getRawStorage();\n  },\n  async _clear() {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n    return controller.clear();\n  },\n  // Pin the object and children recursively\n  // Saves the object and children key to Pin Name\n  async _handlePinAllWithName(name, objects) {\n    const pinName = this.getPinName(name);\n    const toPinPromises = [];\n    const objectKeys = [];\n    for (const parent of objects) {\n      const children = this._getChildren(parent);\n      const parentKey = this.getKeyForObject(parent);\n      const json = parent._toFullJSON(undefined, true);\n      if (parent._localId) {\n        json._localId = parent._localId;\n      }\n      children[parentKey] = json;\n      for (const objectKey in children) {\n        objectKeys.push(objectKey);\n        toPinPromises.push(this.pinWithName(objectKey, [children[objectKey]]));\n      }\n    }\n    const fromPinPromise = this.fromPinWithName(pinName);\n    const [pinned] = await _promise.default.all([fromPinPromise, toPinPromises]);\n    const toPin = [...new _set.default([...(pinned || []), ...objectKeys])];\n    return this.pinWithName(pinName, toPin);\n  },\n  // Removes object and children keys from pin name\n  // Keeps the object and children pinned\n  async _handleUnPinAllWithName(name, objects) {\n    const localDatastore = await this._getAllContents();\n    const pinName = this.getPinName(name);\n    const promises = [];\n    let objectKeys = [];\n    for (const parent of objects) {\n      const children = this._getChildren(parent);\n      const parentKey = this.getKeyForObject(parent);\n      objectKeys.push(parentKey, ...(0, _keys.default)(children));\n    }\n    objectKeys = [...new _set.default(objectKeys)];\n    let pinned = localDatastore[pinName] || [];\n    pinned = (0, _filter.default)(pinned).call(pinned, item => !(0, _includes.default)(objectKeys).call(objectKeys, item));\n    if (pinned.length == 0) {\n      promises.push(this.unPinWithName(pinName));\n      delete localDatastore[pinName];\n    } else {\n      promises.push(this.pinWithName(pinName, pinned));\n      localDatastore[pinName] = pinned;\n    }\n    for (const objectKey of objectKeys) {\n      let hasReference = false;\n      for (const key in localDatastore) {\n        if (key === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.PIN_PREFIX)) {\n          const pinnedObjects = localDatastore[key] || [];\n          if ((0, _includes.default)(pinnedObjects).call(pinnedObjects, objectKey)) {\n            hasReference = true;\n            break;\n          }\n        }\n      }\n      if (!hasReference) {\n        promises.push(this.unPinWithName(objectKey));\n      }\n    }\n    return _promise.default.all(promises);\n  },\n  // Retrieve all pointer fields from object recursively\n  _getChildren(object) {\n    const encountered = {};\n    const json = object._toFullJSON(undefined, true);\n    for (const key in json) {\n      if (json[key] && json[key].__type && json[key].__type === 'Object') {\n        this._traverse(json[key], encountered);\n      }\n    }\n    return encountered;\n  },\n  _traverse(object, encountered) {\n    if (!object.objectId) {\n      return;\n    } else {\n      const objectKey = this.getKeyForObject(object);\n      if (encountered[objectKey]) {\n        return;\n      }\n      encountered[objectKey] = object;\n    }\n    for (const key in object) {\n      let json = object[key];\n      if (!object[key]) {\n        json = object;\n      }\n      if (json.__type && json.__type === 'Object') {\n        this._traverse(json, encountered);\n      }\n    }\n  },\n  // Transform keys in pin name to objects\n  async _serializeObjectsFromPinName(name) {\n    var _context;\n    const localDatastore = await this._getAllContents();\n    const allObjects = [];\n    for (const key in localDatastore) {\n      if ((0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.OBJECT_PREFIX)) {\n        allObjects.push(localDatastore[key][0]);\n      }\n    }\n    if (!name) {\n      return allObjects;\n    }\n    const pinName = this.getPinName(name);\n    const pinned = localDatastore[pinName];\n    if (!(0, _isArray.default)(pinned)) {\n      return [];\n    }\n    const promises = (0, _map.default)(pinned).call(pinned, objectKey => this.fromPinWithName(objectKey));\n    let objects = await _promise.default.all(promises);\n    objects = (0, _concat.default)(_context = []).call(_context, ...objects);\n    return (0, _filter.default)(objects).call(objects, object => object != null);\n  },\n  // Replaces object pointers with pinned pointers\n  // The object pointers may contain old data\n  // Uses Breadth First Search Algorithm\n  async _serializeObject(objectKey, localDatastore) {\n    let LDS = localDatastore;\n    if (!LDS) {\n      LDS = await this._getAllContents();\n    }\n    if (!LDS[objectKey] || LDS[objectKey].length === 0) {\n      return null;\n    }\n    const root = LDS[objectKey][0];\n    const queue = [];\n    const meta = {};\n    let uniqueId = 0;\n    meta[uniqueId] = root;\n    queue.push(uniqueId);\n    while (queue.length !== 0) {\n      const nodeId = queue.shift();\n      const subTreeRoot = meta[nodeId];\n      for (const field in subTreeRoot) {\n        const value = subTreeRoot[field];\n        if (value.__type && value.__type === 'Object') {\n          const key = this.getKeyForObject(value);\n          if (LDS[key] && LDS[key].length > 0) {\n            const pointer = LDS[key][0];\n            uniqueId++;\n            meta[uniqueId] = pointer;\n            subTreeRoot[field] = pointer;\n            queue.push(uniqueId);\n          }\n        }\n      }\n    }\n    return root;\n  },\n  // Called when an object is save / fetched\n  // Update object pin value\n  async _updateObjectIfPinned(object) {\n    if (!this.isEnabled) {\n      return;\n    }\n    const objectKey = this.getKeyForObject(object);\n    const pinned = await this.fromPinWithName(objectKey);\n    if (!pinned || pinned.length === 0) {\n      return;\n    }\n    return this.pinWithName(objectKey, [object._toFullJSON()]);\n  },\n  // Called when object is destroyed\n  // Unpin object and remove all references from pin names\n  // TODO: Destroy children?\n  async _destroyObjectIfPinned(object) {\n    if (!this.isEnabled) {\n      return;\n    }\n    const localDatastore = await this._getAllContents();\n    const objectKey = this.getKeyForObject(object);\n    const pin = localDatastore[objectKey];\n    if (!pin) {\n      return;\n    }\n    const promises = [this.unPinWithName(objectKey)];\n    delete localDatastore[objectKey];\n    for (const key in localDatastore) {\n      if (key === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.PIN_PREFIX)) {\n        let pinned = localDatastore[key] || [];\n        if ((0, _includes.default)(pinned).call(pinned, objectKey)) {\n          pinned = (0, _filter.default)(pinned).call(pinned, item => item !== objectKey);\n          if (pinned.length == 0) {\n            promises.push(this.unPinWithName(key));\n            delete localDatastore[key];\n          } else {\n            promises.push(this.pinWithName(key, pinned));\n            localDatastore[key] = pinned;\n          }\n        }\n      }\n    }\n    return _promise.default.all(promises);\n  },\n  // Update pin and references of the unsaved object\n  async _updateLocalIdForObject(localId, object) {\n    if (!this.isEnabled) {\n      return;\n    }\n    const localKey = `${_LocalDatastoreUtils.OBJECT_PREFIX}${object.className}_${localId}`;\n    const objectKey = this.getKeyForObject(object);\n    const unsaved = await this.fromPinWithName(localKey);\n    if (!unsaved || unsaved.length === 0) {\n      return;\n    }\n    const promises = [this.unPinWithName(localKey), this.pinWithName(objectKey, unsaved)];\n    const localDatastore = await this._getAllContents();\n    for (const key in localDatastore) {\n      if (key === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.PIN_PREFIX)) {\n        let pinned = localDatastore[key] || [];\n        if ((0, _includes.default)(pinned).call(pinned, localKey)) {\n          pinned = (0, _filter.default)(pinned).call(pinned, item => item !== localKey);\n          pinned.push(objectKey);\n          promises.push(this.pinWithName(key, pinned));\n          localDatastore[key] = pinned;\n        }\n      }\n    }\n    return _promise.default.all(promises);\n  },\n  /**\n   * Updates Local Datastore from Server\n   *\n   * <pre>\n   * await Parse.LocalDatastore.updateFromServer();\n   * </pre>\n   *\n   * @function updateFromServer\n   * @name Parse.LocalDatastore.updateFromServer\n   * @static\n   */\n  async updateFromServer() {\n    var _context2;\n    if (!this.checkIfEnabled() || this.isSyncing) {\n      return;\n    }\n    const localDatastore = await this._getAllContents();\n    const keys = [];\n    for (const key in localDatastore) {\n      if ((0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.OBJECT_PREFIX)) {\n        keys.push(key);\n      }\n    }\n    if (keys.length === 0) {\n      return;\n    }\n    this.isSyncing = true;\n    const pointersHash = {};\n    for (const key of keys) {\n      // Ignore the OBJECT_PREFIX\n      let [,, className, objectId] = key.split('_');\n\n      // User key is split into [ 'Parse', 'LDS', '', 'User', 'objectId' ]\n      if (key.split('_').length === 5 && key.split('_')[3] === 'User') {\n        className = '_User';\n        objectId = key.split('_')[4];\n      }\n      if ((0, _startsWith.default)(objectId).call(objectId, 'local')) {\n        continue;\n      }\n      if (!(className in pointersHash)) {\n        pointersHash[className] = new _set.default();\n      }\n      pointersHash[className].add(objectId);\n    }\n    const queryPromises = (0, _map.default)(_context2 = (0, _keys.default)(pointersHash)).call(_context2, className => {\n      const objectIds = (0, _from.default)(pointersHash[className]);\n      const query = new _ParseQuery.default(className);\n      query.limit(objectIds.length);\n      if (objectIds.length === 1) {\n        query.equalTo('objectId', objectIds[0]);\n      } else {\n        query.containedIn('objectId', objectIds);\n      }\n      return (0, _find.default)(query).call(query);\n    });\n    try {\n      const responses = await _promise.default.all(queryPromises);\n      const objects = (0, _concat.default)([]).apply([], responses);\n      const pinPromises = (0, _map.default)(objects).call(objects, object => {\n        const objectKey = this.getKeyForObject(object);\n        return this.pinWithName(objectKey, object._toFullJSON());\n      });\n      await _promise.default.all(pinPromises);\n      this.isSyncing = false;\n    } catch (error) {\n      console.error('Error syncing LocalDatastore: ', error);\n      this.isSyncing = false;\n    }\n  },\n  getKeyForObject(object) {\n    const objectId = object.objectId || object._getId();\n    return `${_LocalDatastoreUtils.OBJECT_PREFIX}${object.className}_${objectId}`;\n  },\n  getPinName(pinName) {\n    if (!pinName || pinName === _LocalDatastoreUtils.DEFAULT_PIN) {\n      return _LocalDatastoreUtils.DEFAULT_PIN;\n    }\n    return _LocalDatastoreUtils.PIN_PREFIX + pinName;\n  },\n  checkIfEnabled() {\n    if (!this.isEnabled) {\n      console.error('Parse.enableLocalDatastore() must be called first');\n    }\n    return this.isEnabled;\n  }\n};\nmodule.exports = LocalDatastore;\nvar _default = exports.default = LocalDatastore;\n_CoreManager.default.setLocalDatastoreController(_LocalDatastoreController.default);\n_CoreManager.default.setLocalDatastore(LocalDatastore);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}