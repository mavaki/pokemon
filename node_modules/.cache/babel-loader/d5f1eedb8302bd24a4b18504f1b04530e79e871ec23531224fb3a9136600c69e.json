{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n/**\n * Creates a new Relation for the given parent object and key. This\n * constructor should rarely be used directly, but rather created by\n * Parse.Object.relation.\n *\n * <p>\n * A class that is used to access all of the children of a many-to-many\n * relationship.  Each instance of Parse.Relation is associated with a\n * particular parent object and key.\n * </p>\n *\n * @alias Parse.Relation\n */\nclass ParseRelation {\n  /**\n   * @param {Parse.Object} parent The parent of this relation.\n   * @param {string} key The key for this relation on the parent.\n   */\n  constructor(parent, key) {\n    (0, _defineProperty2.default)(this, \"parent\", void 0);\n    (0, _defineProperty2.default)(this, \"key\", void 0);\n    (0, _defineProperty2.default)(this, \"targetClassName\", void 0);\n    this.parent = parent;\n    this.key = key;\n    this.targetClassName = null;\n  }\n\n  /*\n   * Makes sure that this relation has the right parent and key.\n   */\n  _ensureParentAndKey(parent, key) {\n    this.key = this.key || key;\n    if (this.key !== key) {\n      throw new Error('Internal Error. Relation retrieved from two different keys.');\n    }\n    if (this.parent) {\n      if (this.parent.className !== parent.className) {\n        throw new Error('Internal Error. Relation retrieved from two different Objects.');\n      }\n      if (this.parent.id) {\n        if (this.parent.id !== parent.id) {\n          throw new Error('Internal Error. Relation retrieved from two different Objects.');\n        }\n      } else if (parent.id) {\n        this.parent = parent;\n      }\n    } else {\n      this.parent = parent;\n    }\n  }\n\n  /**\n   * Adds a Parse.Object or an array of Parse.Objects to the relation.\n   *\n   * @param {(Parse.Object|Array)} objects The item or items to add.\n   * @returns {Parse.Object} The parent of the relation.\n   */\n  add(objects) {\n    if (!(0, _isArray.default)(objects)) {\n      objects = [objects];\n    }\n    const {\n      RelationOp\n    } = _CoreManager.default.getParseOp();\n    const change = new RelationOp(objects, []);\n    const parent = this.parent;\n    if (!parent) {\n      throw new Error('Cannot add to a Relation without a parent');\n    }\n    if (objects.length === 0) {\n      return parent;\n    }\n    parent.set(this.key, change);\n    this.targetClassName = change._targetClassName;\n    return parent;\n  }\n\n  /**\n   * Removes a Parse.Object or an array of Parse.Objects from this relation.\n   *\n   * @param {(Parse.Object|Array)} objects The item or items to remove.\n   */\n  remove(objects) {\n    if (!(0, _isArray.default)(objects)) {\n      objects = [objects];\n    }\n    const {\n      RelationOp\n    } = _CoreManager.default.getParseOp();\n    const change = new RelationOp([], objects);\n    if (!this.parent) {\n      throw new Error('Cannot remove from a Relation without a parent');\n    }\n    if (objects.length === 0) {\n      return;\n    }\n    this.parent.set(this.key, change);\n    this.targetClassName = change._targetClassName;\n  }\n\n  /**\n   * Returns a JSON version of the object suitable for saving to disk.\n   *\n   * @returns {object} JSON representation of Relation\n   */\n  toJSON() {\n    return {\n      __type: 'Relation',\n      className: this.targetClassName\n    };\n  }\n\n  /**\n   * Returns a Parse.Query that is limited to objects in this\n   * relation.\n   *\n   * @returns {Parse.Query} Relation Query\n   */\n  query() {\n    let query;\n    const parent = this.parent;\n    if (!parent) {\n      throw new Error('Cannot construct a query for a Relation without a parent');\n    }\n    const ParseQuery = _CoreManager.default.getParseQuery();\n    if (!this.targetClassName) {\n      query = new ParseQuery(parent.className);\n      query._extraOptions.redirectClassNameForKey = this.key;\n    } else {\n      query = new ParseQuery(this.targetClassName);\n    }\n    query._addCondition('$relatedTo', 'object', {\n      __type: 'Pointer',\n      className: parent.className,\n      objectId: parent.id\n    });\n    query._addCondition('$relatedTo', 'key', this.key);\n    return query;\n  }\n}\nvar _default = exports.default = ParseRelation;","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_isArray","_defineProperty2","_CoreManager","ParseRelation","constructor","parent","key","targetClassName","_ensureParentAndKey","Error","className","id","add","objects","RelationOp","getParseOp","change","length","set","_targetClassName","remove","toJSON","__type","query","ParseQuery","getParseQuery","_extraOptions","redirectClassNameForKey","_addCondition","objectId","_default"],"sources":["/Users/jonathandemarco/react/my-app/node_modules/parse/lib/browser/ParseRelation.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n/**\n * Creates a new Relation for the given parent object and key. This\n * constructor should rarely be used directly, but rather created by\n * Parse.Object.relation.\n *\n * <p>\n * A class that is used to access all of the children of a many-to-many\n * relationship.  Each instance of Parse.Relation is associated with a\n * particular parent object and key.\n * </p>\n *\n * @alias Parse.Relation\n */\nclass ParseRelation {\n  /**\n   * @param {Parse.Object} parent The parent of this relation.\n   * @param {string} key The key for this relation on the parent.\n   */\n  constructor(parent, key) {\n    (0, _defineProperty2.default)(this, \"parent\", void 0);\n    (0, _defineProperty2.default)(this, \"key\", void 0);\n    (0, _defineProperty2.default)(this, \"targetClassName\", void 0);\n    this.parent = parent;\n    this.key = key;\n    this.targetClassName = null;\n  }\n\n  /*\n   * Makes sure that this relation has the right parent and key.\n   */\n  _ensureParentAndKey(parent, key) {\n    this.key = this.key || key;\n    if (this.key !== key) {\n      throw new Error('Internal Error. Relation retrieved from two different keys.');\n    }\n    if (this.parent) {\n      if (this.parent.className !== parent.className) {\n        throw new Error('Internal Error. Relation retrieved from two different Objects.');\n      }\n      if (this.parent.id) {\n        if (this.parent.id !== parent.id) {\n          throw new Error('Internal Error. Relation retrieved from two different Objects.');\n        }\n      } else if (parent.id) {\n        this.parent = parent;\n      }\n    } else {\n      this.parent = parent;\n    }\n  }\n\n  /**\n   * Adds a Parse.Object or an array of Parse.Objects to the relation.\n   *\n   * @param {(Parse.Object|Array)} objects The item or items to add.\n   * @returns {Parse.Object} The parent of the relation.\n   */\n  add(objects) {\n    if (!(0, _isArray.default)(objects)) {\n      objects = [objects];\n    }\n    const {\n      RelationOp\n    } = _CoreManager.default.getParseOp();\n    const change = new RelationOp(objects, []);\n    const parent = this.parent;\n    if (!parent) {\n      throw new Error('Cannot add to a Relation without a parent');\n    }\n    if (objects.length === 0) {\n      return parent;\n    }\n    parent.set(this.key, change);\n    this.targetClassName = change._targetClassName;\n    return parent;\n  }\n\n  /**\n   * Removes a Parse.Object or an array of Parse.Objects from this relation.\n   *\n   * @param {(Parse.Object|Array)} objects The item or items to remove.\n   */\n  remove(objects) {\n    if (!(0, _isArray.default)(objects)) {\n      objects = [objects];\n    }\n    const {\n      RelationOp\n    } = _CoreManager.default.getParseOp();\n    const change = new RelationOp([], objects);\n    if (!this.parent) {\n      throw new Error('Cannot remove from a Relation without a parent');\n    }\n    if (objects.length === 0) {\n      return;\n    }\n    this.parent.set(this.key, change);\n    this.targetClassName = change._targetClassName;\n  }\n\n  /**\n   * Returns a JSON version of the object suitable for saving to disk.\n   *\n   * @returns {object} JSON representation of Relation\n   */\n  toJSON() {\n    return {\n      __type: 'Relation',\n      className: this.targetClassName\n    };\n  }\n\n  /**\n   * Returns a Parse.Query that is limited to objects in this\n   * relation.\n   *\n   * @returns {Parse.Query} Relation Query\n   */\n  query() {\n    let query;\n    const parent = this.parent;\n    if (!parent) {\n      throw new Error('Cannot construct a query for a Relation without a parent');\n    }\n    const ParseQuery = _CoreManager.default.getParseQuery();\n    if (!this.targetClassName) {\n      query = new ParseQuery(parent.className);\n      query._extraOptions.redirectClassNameForKey = this.key;\n    } else {\n      query = new ParseQuery(this.targetClassName);\n    }\n    query._addCondition('$relatedTo', 'object', {\n      __type: 'Pointer',\n      className: parent.className,\n      objectId: parent.id\n    });\n    query._addCondition('$relatedTo', 'key', this.key);\n    return query;\n  }\n}\nvar _default = exports.default = ParseRelation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}